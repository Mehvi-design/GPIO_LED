
LED_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004464  08004464  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08004464  08004464  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004464  08004464  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800446c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          0000002c  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fca  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a04  00000000  00000000  0002a10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000810  00000000  00000000  0002c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e69  00000000  00000000  0002cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090f2  00000000  00000000  0004ea71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf47  00000000  00000000  00057b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123aaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002444  00000000  00000000  00123afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800437c 	.word	0x0800437c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800437c 	.word	0x0800437c

080001c8 <First_Order_Transfer_Func_Compute>:
    transfer_func->Output_L1 = 0.0f;
    transfer_func->Input = 0.0f;
    transfer_func->Input_L1 = 0.0f;
}

void First_Order_Transfer_Func_Compute(first_order_transfer_func_t *transfer_func){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    transfer_func->Output = transfer_func->B0 * transfer_func->Input +
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80001dc:	ee27 7a27 	vmul.f32	s14, s14, s15
                            transfer_func->B1 * transfer_func->Input_L1 -
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80001ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    transfer_func->Output = transfer_func->B0 * transfer_func->Input +
 80001f0:	ee37 7a27 	vadd.f32	s14, s14, s15
                            transfer_func->A1 * transfer_func->Output_L1;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	edd3 6a04 	vldr	s13, [r3, #16]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000200:	ee66 7aa7 	vmul.f32	s15, s13, s15
                            transfer_func->B1 * transfer_func->Input_L1 -
 8000204:	ee77 7a67 	vsub.f32	s15, s14, s15
    transfer_func->Output = transfer_func->B0 * transfer_func->Input +
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	edc3 7a00 	vstr	s15, [r3]
    transfer_func->Input_L1 = transfer_func->Input;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	685a      	ldr	r2, [r3, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	60da      	str	r2, [r3, #12]
    transfer_func->Output_L1 = transfer_func->Output;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	609a      	str	r2, [r3, #8]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <First_Order_Transfer_Func_Compute_with_Parameter>:

float First_Order_Transfer_Func_Compute_with_Parameter(first_order_transfer_func_t *transfer_func, float Input){
 800022a:	b580      	push	{r7, lr}
 800022c:	b082      	sub	sp, #8
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	ed87 0a00 	vstr	s0, [r7]
    transfer_func->Input = Input;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	605a      	str	r2, [r3, #4]
    First_Order_Transfer_Func_Compute(transfer_func);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f7ff ffc3 	bl	80001c8 <First_Order_Transfer_Func_Compute>
    return transfer_func->Output;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	ee07 3a90 	vmov	s15, r3
}
 800024a:	eeb0 0a67 	vmov.f32	s0, s15
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d103      	bne.n	8000270 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3340      	adds	r3, #64	; 0x40
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	e001      	b.n	8000274 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <LL_ADC_DMA_GetRegAddr+0x30>)
 8000272:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 8000274:	68fb      	ldr	r3, [r7, #12]
}
 8000276:	4618      	mov	r0, r3
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	5000030c 	.word	0x5000030c

08000288 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800029c:	f043 0201 	orr.w	r2, r3, #1
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80002c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80002cc:	4313      	orrs	r3, r2
 80002ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b083      	sub	sp, #12
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80002f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002f6:	bf0c      	ite	eq
 80002f8:	2301      	moveq	r3, #1
 80002fa:	2300      	movne	r3, #0
 80002fc:	b2db      	uxtb	r3, r3
}
 80002fe:	4618      	mov	r0, r3
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800031a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800031e:	f043 0204 	orr.w	r2, r3, #4
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_ADC_INJ_StartConversion>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000346:	f043 0208 	orr.w	r2, r3, #8
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTART);
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <LL_ADC_INJ_ReadConversionData32>:
  *         @arg @ref LL_ADC_INJ_RANK_3
  *         @arg @ref LL_ADC_INJ_RANK_4
  * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
{
 800035a:	b480      	push	{r7}
 800035c:	b087      	sub	sp, #28
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3380      	adds	r3, #128	; 0x80
 8000368:	4619      	mov	r1, r3
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000370:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000374:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	693a      	ldr	r2, [r7, #16]
 8000378:	fa92 f2a2 	rbit	r2, r2
 800037c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	40d3      	lsrs	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	440b      	add	r3, r1
 800038c:	617b      	str	r3, [r7, #20]
  
  return (uint32_t)(READ_BIT(*preg,
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	b29b      	uxth	r3, r3
                             ADC_JDR1_JDATA)
                   );
}
 8000394:	4618      	mov	r0, r3
 8000396:	371c      	adds	r7, #28
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_ADC_INJ_ReadConversionData12>:
  *         @arg @ref LL_ADC_INJ_RANK_3
  *         @arg @ref LL_ADC_INJ_RANK_4
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, __ADC_MASK_SHIFT(Rank, ADC_INJ_JDRX_REGOFFSET_MASK));
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3380      	adds	r3, #128	; 0x80
 80003ae:	4619      	mov	r1, r3
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80003b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003bc:	693a      	ldr	r2, [r7, #16]
 80003be:	fa92 f2a2 	rbit	r2, r2
 80003c2:	60fa      	str	r2, [r7, #12]
  return result;
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	440b      	add	r3, r1
 80003d2:	617b      	str	r3, [r7, #20]
  
  return (uint16_t)(READ_BIT(*preg,
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	b29b      	uxth	r3, r3
                             ADC_JDR1_JDATA)
                   );
}
 80003da:	4618      	mov	r0, r3
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <LL_ADC_EnableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_EnableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	f043 0220 	orr.w	r2, r3, #32
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	605a      	str	r2, [r3, #4]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <LL_HRTIM_EnableOutput>:
  *         @arg @ref LL_HRTIM_OUTPUT_TE1
  *         @arg @ref LL_HRTIM_OUTPUT_TE2
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_EnableOutput(HRTIM_TypeDef *HRTIMx, uint32_t Outputs)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  SET_BIT(HRTIMx->sCommonRegs.OENR, (Outputs & HRTIM_OENR_OEN_MASK));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f8d3 2394 	ldr.w	r2, [r3, #916]	; 0x394
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800041c:	431a      	orrs	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <LL_HRTIM_TIM_CounterEnable>:
  *         @arg @ref LL_HRTIM_TIMER_D
  *         @arg @ref LL_HRTIM_TIMER_E
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_CounterEnable(HRTIM_TypeDef *HRTIMx, uint32_t Timers)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  SET_BIT(HRTIMx->sMasterRegs.MCR, Timers);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	431a      	orrs	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <LL_HRTIM_TIM_SetCompare1>:
  *         periods of the fHRTIM clock, that is 0x60 if CKPSC[2:0] = 0,
  *         0x30 if CKPSC[2:0] = 1, 0x18 if CKPSC[2:0] = 2,...
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCompare1(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t CompareValue)
{
 8000454:	b480      	push	{r7}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	fa93 f3a3 	rbit	r3, r3
 800046a:	613b      	str	r3, [r7, #16]
  return result;
 800046c:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800046e:	fab3 f383 	clz	r3, r3
 8000472:	b2db      	uxtb	r3, r3
 8000474:	3b10      	subs	r3, #16
 8000476:	b2db      	uxtb	r3, r3
 8000478:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	331c      	adds	r3, #28
 800047e:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <LL_HRTIM_TIM_SetCompare1+0x54>)
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 8000488:	440b      	add	r3, r1
 800048a:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	0c1b      	lsrs	r3, r3, #16
 8000492:	041b      	lsls	r3, r3, #16
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	431a      	orrs	r2, r3
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3724      	adds	r7, #36	; 0x24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	08004394 	.word	0x08004394

080004ac <LL_HRTIM_TIM_SetCompare2>:
  *         periods of the fHRTIM clock, that is 0x60 if CKPSC[2:0] = 0,
  *         0x30 if CKPSC[2:0] = 1, 0x18 if CKPSC[2:0] = 2,...
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCompare2(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t CompareValue)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b089      	sub	sp, #36	; 0x24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	fa93 f3a3 	rbit	r3, r3
 80004c2:	613b      	str	r3, [r7, #16]
  return result;
 80004c4:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80004c6:	fab3 f383 	clz	r3, r3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	3b10      	subs	r3, #16
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3324      	adds	r3, #36	; 0x24
 80004d6:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <LL_HRTIM_TIM_SetCompare2+0x54>)
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 80004e0:	440b      	add	r3, r1
 80004e2:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP2R, CompareValue);
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	041b      	lsls	r3, r3, #16
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	431a      	orrs	r2, r3
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	3724      	adds	r7, #36	; 0x24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	08004394 	.word	0x08004394

08000504 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <LL_DMA_EnableChannel+0x3c>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	461a      	mov	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4413      	add	r3, r2
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	683a      	ldr	r2, [r7, #0]
 8000520:	3a01      	subs	r2, #1
 8000522:	4907      	ldr	r1, [pc, #28]	; (8000540 <LL_DMA_EnableChannel+0x3c>)
 8000524:	5c8a      	ldrb	r2, [r1, r2]
 8000526:	4611      	mov	r1, r2
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	440a      	add	r2, r1
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	080043a0 	.word	0x080043a0

08000544 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <LL_DMA_SetDataLength+0x44>)
 8000556:	5cd3      	ldrb	r3, [r2, r3]
 8000558:	461a      	mov	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4413      	add	r3, r2
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	0c1b      	lsrs	r3, r3, #16
 8000562:	041b      	lsls	r3, r3, #16
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	3a01      	subs	r2, #1
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <LL_DMA_SetDataLength+0x44>)
 800056a:	5c8a      	ldrb	r2, [r1, r2]
 800056c:	4611      	mov	r1, r2
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	440a      	add	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	080043a0 	.word	0x080043a0

0800058c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <LL_DMA_SetMemoryAddress+0x2c>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	60d3      	str	r3, [r2, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	080043a0 	.word	0x080043a0

080005bc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <LL_DMA_SetPeriphAddress+0x2c>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6093      	str	r3, [r2, #8]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	080043a0 	.word	0x080043a0

080005ec <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LL_DMA_EnableIT_TC+0x3c>)
 80005fc:	5cd3      	ldrb	r3, [r2, r3]
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	3a01      	subs	r2, #1
 800060a:	4907      	ldr	r1, [pc, #28]	; (8000628 <LL_DMA_EnableIT_TC+0x3c>)
 800060c:	5c8a      	ldrb	r2, [r1, r2]
 800060e:	4611      	mov	r1, r2
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	440a      	add	r2, r1
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6013      	str	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	080043a0 	.word	0x080043a0

0800062c <setup>:
};

uint32_t Test_Tick;
uint32_t Test_Tick2;
uint32_t duty = 1000UL;
void setup(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	LL_HRTIM_EnableOutput(HRTIM1,LL_HRTIM_OUTPUT_TC1);
 8000630:	2110      	movs	r1, #16
 8000632:	4825      	ldr	r0, [pc, #148]	; (80006c8 <setup+0x9c>)
 8000634:	f7ff fee7 	bl	8000406 <LL_HRTIM_EnableOutput>
	LL_HRTIM_TIM_CounterEnable(HRTIM1, LL_HRTIM_TIMER_C|LL_HRTIM_TIMER_A);
 8000638:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <setup+0x9c>)
 800063e:	f7ff fef7 	bl	8000430 <LL_HRTIM_TIM_CounterEnable>

	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000642:	217f      	movs	r1, #127	; 0x7f
 8000644:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000648:	f7ff fe32 	bl	80002b0 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0){}
 800064c:	bf00      	nop
 800064e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000652:	f7ff fe46 	bl	80002e2 <LL_ADC_IsCalibrationOnGoing>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f8      	bne.n	800064e <setup+0x22>
	LL_ADC_Enable(ADC1);
 800065c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000660:	f7ff fe12 	bl	8000288 <LL_ADC_Enable>
	LL_ADC_EnableIT_JEOC(ADC1);
 8000664:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000668:	f7ff febd 	bl	80003e6 <LL_ADC_EnableIT_JEOC>
	LL_ADC_INJ_StartConversion(ADC1);
 800066c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000670:	f7ff fe5f 	bl	8000332 <LL_ADC_INJ_StartConversion>
	LL_ADC_REG_StartConversion(ADC1);
 8000674:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000678:	f7ff fe47 	bl	800030a <LL_ADC_REG_StartConversion>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 2);
 800067c:	2202      	movs	r2, #2
 800067e:	2101      	movs	r1, #1
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <setup+0xa0>)
 8000682:	f7ff ff5f 	bl	8000544 <LL_DMA_SetDataLength>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
 8000686:	2100      	movs	r1, #0
 8000688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800068c:	f7ff fde2 	bl	8000254 <LL_ADC_DMA_GetRegAddr>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	2101      	movs	r1, #1
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <setup+0xa0>)
 8000698:	f7ff ff90 	bl	80005bc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ADC_Result_REG);
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <setup+0xa4>)
 800069e:	461a      	mov	r2, r3
 80006a0:	2101      	movs	r1, #1
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <setup+0xa0>)
 80006a4:	f7ff ff72 	bl	800058c <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_1);
 80006a8:	2101      	movs	r1, #1
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <setup+0xa0>)
 80006ac:	f7ff ff9e 	bl	80005ec <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <setup+0xa0>)
 80006b4:	f7ff ff26 	bl	8000504 <LL_DMA_EnableChannel>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <setup+0xa8>)
 80006c0:	f002 f858 	bl	8002774 <HAL_GPIO_WritePin>

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40017400 	.word	0x40017400
 80006cc:	40020000 	.word	0x40020000
 80006d0:	2000012c 	.word	0x2000012c
 80006d4:	48000400 	.word	0x48000400

080006d8 <loop>:

void loop(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	LL_HRTIM_TIM_SetCompare1(HRTIM1,LL_HRTIM_TIMER_C,3000);
 80006dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <loop+0x24>)
 80006e6:	f7ff feb5 	bl	8000454 <LL_HRTIM_TIM_SetCompare1>
	LL_HRTIM_TIM_SetCompare2(HRTIM1,LL_HRTIM_TIMER_C,11520 - 3000);
 80006ea:	f242 1248 	movw	r2, #8520	; 0x2148
 80006ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <loop+0x24>)
 80006f4:	f7ff feda 	bl	80004ac <LL_HRTIM_TIM_SetCompare2>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40017400 	.word	0x40017400

08000700 <ISR_ADC1_JEOC>:

void ISR_ADC1_JEOC(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_8);
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	481d      	ldr	r0, [pc, #116]	; (8000780 <ISR_ADC1_JEOC+0x80>)
 800070c:	f002 f84a 	bl	80027a4 <HAL_GPIO_TogglePin>
	uint32_t Temp = SysTick->VAL;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <ISR_ADC1_JEOC+0x84>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	607b      	str	r3, [r7, #4]
	IL.filter.Input = LL_ADC_INJ_ReadConversionData32(ADC1, LL_ADC_INJ_RANK_1);
 8000716:	2108      	movs	r1, #8
 8000718:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800071c:	f7ff fe1d 	bl	800035a <LL_ADC_INJ_ReadConversionData32>
 8000720:	ee07 0a90 	vmov	s15, r0
 8000724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <ISR_ADC1_JEOC+0x88>)
 800072a:	edc3 7a03 	vstr	s15, [r3, #12]
	Vout.filter.Input = LL_ADC_INJ_ReadConversionData32(ADC1, LL_ADC_INJ_RANK_3);
 800072e:	f44f 7105 	mov.w	r1, #532	; 0x214
 8000732:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000736:	f7ff fe10 	bl	800035a <LL_ADC_INJ_ReadConversionData32>
 800073a:	ee07 0a90 	vmov	s15, r0
 800073e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <ISR_ADC1_JEOC+0x8c>)
 8000744:	edc3 7a03 	vstr	s15, [r3, #12]
	Iout.filter.Input = LL_ADC_INJ_ReadConversionData12(ADC1, LL_ADC_INJ_RANK_2);
 8000748:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800074c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000750:	f7ff fe26 	bl	80003a0 <LL_ADC_INJ_ReadConversionData12>
 8000754:	4603      	mov	r3, r0
 8000756:	ee07 3a90 	vmov	s15, r3
 800075a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <ISR_ADC1_JEOC+0x90>)
 8000760:	edc3 7a03 	vstr	s15, [r3, #12]
	First_Order_Transfer_Func_Compute(&IL.filter);
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <ISR_ADC1_JEOC+0x94>)
 8000766:	f7ff fd2f 	bl	80001c8 <First_Order_Transfer_Func_Compute>
	Test_Tick = Temp - SysTick->VAL;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <ISR_ADC1_JEOC+0x84>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <ISR_ADC1_JEOC+0x98>)
 8000774:	6013      	str	r3, [r2, #0]

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	48000400 	.word	0x48000400
 8000784:	e000e010 	.word	0xe000e010
 8000788:	20000068 	.word	0x20000068
 800078c:	20000000 	.word	0x20000000
 8000790:	2000009c 	.word	0x2000009c
 8000794:	20000070 	.word	0x20000070
 8000798:	20000130 	.word	0x20000130

0800079c <ISR_DMA1_TC>:

void ISR_DMA1_TC(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	uint32_t Temp = SysTick->VAL;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <ISR_DMA1_TC+0x60>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	607b      	str	r3, [r7, #4]
	Vin.Filted = First_Order_Transfer_Func_Compute_with_Parameter(&Vin.filter, (float)ADC_Result_REG[1]);
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <ISR_DMA1_TC+0x64>)
 80007aa:	885b      	ldrh	r3, [r3, #2]
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b4:	eeb0 0a67 	vmov.f32	s0, s15
 80007b8:	4812      	ldr	r0, [pc, #72]	; (8000804 <ISR_DMA1_TC+0x68>)
 80007ba:	f7ff fd36 	bl	800022a <First_Order_Transfer_Func_Compute_with_Parameter>
 80007be:	eef0 7a40 	vmov.f32	s15, s0
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <ISR_DMA1_TC+0x6c>)
 80007c4:	edc3 7a01 	vstr	s15, [r3, #4]
	Iin.Filted = First_Order_Transfer_Func_Compute_with_Parameter(&Iin.filter, (float)ADC_Result_REG[0]);
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <ISR_DMA1_TC+0x64>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d4:	eeb0 0a67 	vmov.f32	s0, s15
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <ISR_DMA1_TC+0x70>)
 80007da:	f7ff fd26 	bl	800022a <First_Order_Transfer_Func_Compute_with_Parameter>
 80007de:	eef0 7a40 	vmov.f32	s15, s0
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <ISR_DMA1_TC+0x74>)
 80007e4:	edc3 7a01 	vstr	s15, [r3, #4]
	Test_Tick2 = Temp - SysTick->VAL;
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <ISR_DMA1_TC+0x60>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	4a08      	ldr	r2, [pc, #32]	; (8000814 <ISR_DMA1_TC+0x78>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	e000e010 	.word	0xe000e010
 8000800:	2000012c 	.word	0x2000012c
 8000804:	2000003c 	.word	0x2000003c
 8000808:	20000034 	.word	0x20000034
 800080c:	200000d8 	.word	0x200000d8
 8000810:	200000d0 	.word	0x200000d0
 8000814:	20000134 	.word	0x20000134

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4907      	ldr	r1, [pc, #28]	; (800086c <__NVIC_EnableIRQ+0x38>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	; (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	; (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	; 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <LL_ADC_REG_SetTriggerEdge>:
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60da      	str	r2, [r3, #12]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_ADC_REG_SetSequencerRanks>:
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3330      	adds	r3, #48	; 0x30
 8000960:	4619      	mov	r1, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000968:	f44f 7240 	mov.w	r2, #768	; 0x300
 800096c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	fa92 f2a2 	rbit	r2, r2
 8000974:	617a      	str	r2, [r7, #20]
  return result;
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	fab2 f282 	clz	r2, r2
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	40d3      	lsrs	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	211f      	movs	r1, #31
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	401a      	ands	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0e9b      	lsrs	r3, r3, #26
 800099e:	f003 011f 	and.w	r1, r3, #31
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	f003 031f 	and.w	r3, r3, #31
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	431a      	orrs	r2, r3
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <LL_ADC_INJ_SetTriggerEdge>:
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_ADC_INJ_SetSequencerDiscont>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60da      	str	r2, [r3, #12]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <LL_ADC_INJ_SetTrigAuto>:
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60da      	str	r2, [r3, #12]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_ADC_INJ_SetQueueMode>:
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	431a      	orrs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60da      	str	r2, [r3, #12]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <LL_ADC_INJ_ConfigQueueContext>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	603b      	str	r3, [r7, #0]
  MODIFY_REG(ADCx->JSQR           ,
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <LL_ADC_INJ_ConfigQueueContext+0x6c>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2201      	movne	r2, #1
 8000a76:	2200      	moveq	r2, #0
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	fb02 f101 	mul.w	r1, r2, r1
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	4311      	orrs	r1, r2
 8000a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a88:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a8c:	4311      	orrs	r1, r2
 8000a8e:	6a3a      	ldr	r2, [r7, #32]
 8000a90:	0992      	lsrs	r2, r2, #6
 8000a92:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
 8000a96:	4311      	orrs	r1, r2
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	0b12      	lsrs	r2, r2, #12
 8000a9c:	f402 22f8 	and.w	r2, r2, #507904	; 0x7c000
 8000aa0:	4311      	orrs	r1, r2
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	0c92      	lsrs	r2, r2, #18
 8000aa6:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8000aaa:	4311      	orrs	r1, r2
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	82082000 	.word	0x82082000

08000ac8 <LL_ADC_SetChannelSamplingTime>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b08d      	sub	sp, #52	; 0x34
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3314      	adds	r3, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	fa92 f2a2 	rbit	r2, r2
 8000aec:	617a      	str	r2, [r7, #20]
  return result;
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	40d3      	lsrs	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000b08:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000b0c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b0e:	6a39      	ldr	r1, [r7, #32]
 8000b10:	fa91 f1a1 	rbit	r1, r1
 8000b14:	61f9      	str	r1, [r7, #28]
  return result;
 8000b16:	69f9      	ldr	r1, [r7, #28]
 8000b18:	fab1 f181 	clz	r1, r1
 8000b1c:	b2c9      	uxtb	r1, r1
 8000b1e:	40cb      	lsrs	r3, r1
 8000b20:	2107      	movs	r1, #7
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	401a      	ands	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000b30:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000b34:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b38:	fa91 f1a1 	rbit	r1, r1
 8000b3c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b40:	fab1 f181 	clz	r1, r1
 8000b44:	b2c9      	uxtb	r1, r1
 8000b46:	40cb      	lsrs	r3, r1
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3734      	adds	r7, #52	; 0x34
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_ADC_SetChannelSingleDiff>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b76:	400b      	ands	r3, r1
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0318 	and.w	r3, r3, #24
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b84:	40d9      	lsrs	r1, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	4019      	ands	r1, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	0007fffe 	.word	0x0007fffe

08000ba8 <LL_ADC_EnableInternalRegulator>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	609a      	str	r2, [r3, #8]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f023 0220 	bic.w	r2, r3, #32
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	605a      	str	r2, [r3, #4]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_DisableIT_JEOS>:
  * @rmtoll IER      JEOSIE         LL_ADC_DisableIT_JEOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	605a      	str	r2, [r3, #4]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_HRTIM_ForceUpdate>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  SET_BIT(HRTIMx->sCommonRegs.CR2, ((Timers >> HRTIM_MCR_MCEN_Pos) & HRTIM_CR2_SWUPD_MASK));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_HRTIM_ConfigADCTrig>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
  uint32_t shift = ((3U * ADCTrig) & 0x1FU);
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f003 031f 	and.w	r3, r3, #31
 8000c62:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sCommonRegs.ADC1R) +
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000c6a:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_ADCxR[ADCTrig]));
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <LL_HRTIM_ConfigADCTrig+0x68>)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sCommonRegs.ADC1R) +
 8000c74:	440b      	add	r3, r1
 8000c76:	613b      	str	r3, [r7, #16]
  MODIFY_REG(HRTIMx->sCommonRegs.CR1, (HRTIM_CR1_ADC1USRC << shift), (Update << shift));
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 8000c7e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	431a      	orrs	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
  WRITE_REG(*pReg, Src);
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	601a      	str	r2, [r3, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	080043b4 	.word	0x080043b4

08000cb4 <LL_HRTIM_ConfigDLLCalibration>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(HRTIMx->sCommonRegs.DLLCR, (HRTIM_DLLCR_CALEN | HRTIM_DLLCR_CALRTE), (Mode | Period));
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8000cc6:	f023 020e 	bic.w	r2, r3, #14
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_HRTIM_TIM_SetPrescaler>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	613b      	str	r3, [r7, #16]
  return result;
 8000cfc:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	3b10      	subs	r3, #16
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LL_HRTIM_TIM_SetPrescaler+0x54>)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d16:	440b      	add	r3, r1
 8000d18:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(*pReg, HRTIM_MCR_CK_PSC, Prescaler);
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 0207 	bic.w	r2, r3, #7
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	080043a8 	.word	0x080043a8

08000d3c <LL_HRTIM_TIM_SetCounterMode>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	613b      	str	r3, [r7, #16]
  return result;
 8000d54:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	3b10      	subs	r3, #16
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LL_HRTIM_TIM_SetCounterMode+0x54>)
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6e:	440b      	add	r3, r1
 8000d70:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(*pReg, (HRTIM_TIMCR_RETRIG | HRTIM_MCR_CONT), Mode);
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 0218 	bic.w	r2, r3, #24
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	080043a8 	.word	0x080043a8

08000d94 <LL_HRTIM_TIM_DisableHalfMode>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	60bb      	str	r3, [r7, #8]
  return result;
 8000daa:	68bb      	ldr	r3, [r7, #8]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3b10      	subs	r3, #16
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <LL_HRTIM_TIM_DisableHalfMode+0x4c>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc4:	440b      	add	r3, r1
 8000dc6:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(*pReg, HRTIM_MCR_HALF);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 0220 	bic.w	r2, r3, #32
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	371c      	adds	r7, #28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	080043a8 	.word	0x080043a8

08000de4 <LL_HRTIM_TIM_DisableStartOnSync>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	60bb      	str	r3, [r7, #8]
  return result;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3b10      	subs	r3, #16
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <LL_HRTIM_TIM_DisableStartOnSync+0x4c>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e14:	440b      	add	r3, r1
 8000e16:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCSTRTM);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	080043a8 	.word	0x080043a8

08000e34 <LL_HRTIM_TIM_DisableResetOnSync>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	60bb      	str	r3, [r7, #8]
  return result;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000e4c:	fab3 f383 	clz	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	3b10      	subs	r3, #16
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <LL_HRTIM_TIM_DisableResetOnSync+0x4c>)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e64:	440b      	add	r3, r1
 8000e66:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCRSTM);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	371c      	adds	r7, #28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	080043a8 	.word	0x080043a8

08000e84 <LL_HRTIM_TIM_SetDACTrig>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	613b      	str	r3, [r7, #16]
  return result;
 8000e9c:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3b10      	subs	r3, #16
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4619      	mov	r1, r3
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LL_HRTIM_TIM_SetDACTrig+0x54>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb6:	440b      	add	r3, r1
 8000eb8:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(*pReg, HRTIM_MCR_DACSYNC, DACTrig);
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	080043a8 	.word	0x080043a8

08000edc <LL_HRTIM_TIM_DisablePreload>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	60bb      	str	r3, [r7, #8]
  return result;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3b10      	subs	r3, #16
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <LL_HRTIM_TIM_DisablePreload+0x4c>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(*pReg, HRTIM_MCR_PREEN);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	080043a8 	.word	0x080043a8

08000f2c <LL_HRTIM_TIM_SetUpdateTrig>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	613b      	str	r3, [r7, #16]
  return result;
 8000f44:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3b10      	subs	r3, #16
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <LL_HRTIM_TIM_SetUpdateTrig+0x68>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5e:	440b      	add	r3, r1
 8000f60:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATETRIG[iTimer], UpdateTrig << REG_SHIFT_TAB_UPDATETRIG[iTimer]);
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	490c      	ldr	r1, [pc, #48]	; (8000f98 <LL_HRTIM_TIM_SetUpdateTrig+0x6c>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	401a      	ands	r2, r3
 8000f72:	490a      	ldr	r1, [pc, #40]	; (8000f9c <LL_HRTIM_TIM_SetUpdateTrig+0x70>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	440b      	add	r3, r1
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	408b      	lsls	r3, r1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	080043a8 	.word	0x080043a8
 8000f98:	080043e0 	.word	0x080043e0
 8000f9c:	080043f8 	.word	0x080043f8

08000fa0 <LL_HRTIM_TIM_SetUpdateGating>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	613b      	str	r3, [r7, #16]
  return result;
 8000fb8:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3b10      	subs	r3, #16
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <LL_HRTIM_TIM_SetUpdateGating+0x68>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd2:	440b      	add	r3, r1
 8000fd4:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATEGATING[iTimer], (UpdateGating << REG_SHIFT_TAB_UPDATEGATING[iTimer]));
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	490c      	ldr	r1, [pc, #48]	; (800100c <LL_HRTIM_TIM_SetUpdateGating+0x6c>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	490a      	ldr	r1, [pc, #40]	; (8001010 <LL_HRTIM_TIM_SetUpdateGating+0x70>)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	440b      	add	r3, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	408b      	lsls	r3, r1
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	080043a8 	.word	0x080043a8
 800100c:	08004400 	.word	0x08004400
 8001010:	08004418 	.word	0x08004418

08001014 <LL_HRTIM_TIM_DisablePushPullMode>:
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	60bb      	str	r3, [r7, #8]
  return result;
 800102a:	68bb      	ldr	r3, [r7, #8]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3b11      	subs	r3, #17
 8001034:	b2db      	uxtb	r3, r3
 8001036:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3380      	adds	r3, #128	; 0x80
 800103c:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <LL_HRTIM_TIM_DisablePushPullMode+0x50>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 8001046:	440b      	add	r3, r1
 8001048:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_PSHPLL);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	601a      	str	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	080043a8 	.word	0x080043a8

08001068 <LL_HRTIM_TIM_SetCompareMode>:
{
 8001068:	b480      	push	{r7}
 800106a:	b08f      	sub	sp, #60	; 0x3c
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	617b      	str	r3, [r7, #20]
  return result;
 8001082:	697b      	ldr	r3, [r7, #20]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3b11      	subs	r3, #17
 800108c:	b2db      	uxtb	r3, r3
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3380      	adds	r3, #128	; 0x80
 8001094:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <LL_HRTIM_TIM_SetCompareMode+0x9c>)
 8001098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 800109e:	440b      	add	r3, r1
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	61fb      	str	r3, [r7, #28]
  return result;
 80010ae:	69fb      	ldr	r3, [r7, #28]
  uint32_t shift = (((uint32_t)POSITION_VAL(CompareUnit) - (uint32_t)POSITION_VAL(LL_HRTIM_COMPAREUNIT_2)) & 0x1FU);
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(* pReg, (HRTIM_TIMCR_DELCMP2 << shift), (Mode << shift));
 80010d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	373c      	adds	r7, #60	; 0x3c
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	080043a8 	.word	0x080043a8

08001108 <LL_HRTIM_TIM_SetPeriod>:
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	613b      	str	r3, [r7, #16]
  return result;
 8001120:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3b10      	subs	r3, #16
 800112a:	b2db      	uxtb	r3, r3
 800112c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MPER) +
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3314      	adds	r3, #20
 8001132:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001134:	4a09      	ldr	r2, [pc, #36]	; (800115c <LL_HRTIM_TIM_SetPeriod+0x54>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MPER) +
 800113c:	440b      	add	r3, r1
 800113e:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(* pReg, HRTIM_MPER_MPER, Period);
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0c1b      	lsrs	r3, r3, #16
 8001146:	041b      	lsls	r3, r3, #16
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	431a      	orrs	r2, r3
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	3724      	adds	r7, #36	; 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	080043a8 	.word	0x080043a8

08001160 <LL_HRTIM_TIM_SetRepetition>:
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	613b      	str	r3, [r7, #16]
  return result;
 8001178:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	3b10      	subs	r3, #16
 8001182:	b2db      	uxtb	r3, r3
 8001184:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MREP) +
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3318      	adds	r3, #24
 800118a:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <LL_HRTIM_TIM_SetRepetition+0x54>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MREP) +
 8001194:	440b      	add	r3, r1
 8001196:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(* pReg, HRTIM_MREP_MREP, Repetition);
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3724      	adds	r7, #36	; 0x24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	080043a8 	.word	0x080043a8

080011b8 <LL_HRTIM_TIM_SetCompare1>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	613b      	str	r3, [r7, #16]
  return result;
 80011d0:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3b10      	subs	r3, #16
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	331c      	adds	r3, #28
 80011e2:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <LL_HRTIM_TIM_SetCompare1+0x54>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 80011ec:	440b      	add	r3, r1
 80011ee:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0c1b      	lsrs	r3, r3, #16
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	431a      	orrs	r2, r3
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3724      	adds	r7, #36	; 0x24
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	080043a8 	.word	0x080043a8

08001210 <LL_HRTIM_TIM_SetCompare2>:
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	613b      	str	r3, [r7, #16]
  return result;
 8001228:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3b10      	subs	r3, #16
 8001232:	b2db      	uxtb	r3, r3
 8001234:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3324      	adds	r3, #36	; 0x24
 800123a:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <LL_HRTIM_TIM_SetCompare2+0x54>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 8001244:	440b      	add	r3, r1
 8001246:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP2R, CompareValue);
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	431a      	orrs	r2, r3
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	3724      	adds	r7, #36	; 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	080043a8 	.word	0x080043a8

08001268 <LL_HRTIM_TIM_SetResetTrig>:
  *         @arg @ref LL_HRTIM_RESETTRIG_OTHER4_CMP2
  *         @arg @ref LL_HRTIM_RESETTRIG_OTHER4_CMP4
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetResetTrig(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t ResetTrig)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	613b      	str	r3, [r7, #16]
  return result;
 8001280:	693b      	ldr	r3, [r7, #16]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3b11      	subs	r3, #17
 800128a:	b2db      	uxtb	r3, r3
 800128c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTxR) +
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	33d4      	adds	r3, #212	; 0xd4
 8001292:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <LL_HRTIM_TIM_SetResetTrig+0x4c>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTxR) +
 800129c:	440b      	add	r3, r1
 800129e:	61bb      	str	r3, [r7, #24]
  WRITE_REG(*pReg, ResetTrig);
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	080043a8 	.word	0x080043a8

080012b8 <LL_HRTIM_TIM_DisableDeadTime>:
  *         @arg @ref LL_HRTIM_TIMER_D
  *         @arg @ref LL_HRTIM_TIMER_E
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisableDeadTime(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	60bb      	str	r3, [r7, #8]
  return result;
 80012ce:	68bb      	ldr	r3, [r7, #8]
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3b11      	subs	r3, #17
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	617b      	str	r3, [r7, #20]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	33e4      	adds	r3, #228	; 0xe4
 80012e0:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_TIMER[iTimer]));
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <LL_HRTIM_TIM_DisableDeadTime+0x50>)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80012ea:	440b      	add	r3, r1
 80012ec:	613b      	str	r3, [r7, #16]
  CLEAR_BIT(*pReg, HRTIM_OUTR_DTEN);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	080043a8 	.word	0x080043a8

0800130c <LL_HRTIM_TIM_SetBurstModeOption>:
  *         @arg @ref LL_HRTIM_BURSTMODE_MAINTAINCLOCK
  *         @arg @ref LL_HRTIM_BURSTMODE_RESETCOUNTER
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetBurstModeOption(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t BurtsModeOption)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	617b      	str	r3, [r7, #20]
  return result;
 8001324:	697b      	ldr	r3, [r7, #20]
  uint32_t iTimer = (uint8_t)((POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos) & 0x1FU);
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	3b10      	subs	r3, #16
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(HRTIMx->sCommonRegs.BMCR, Timer, BurtsModeOption << iTimer);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	43db      	mvns	r3, r3
 8001340:	401a      	ands	r2, r3
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <LL_HRTIM_OUT_SetOutputSetSrc>:
  *         @arg @ref LL_HRTIM_CROSSBAR_EEV_10
  *         @arg @ref LL_HRTIM_CROSSBAR_UPDATE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetOutputSetSrc(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t SetSrc)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	613b      	str	r3, [r7, #16]
  return result;
 8001378:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2da      	uxtb	r2, r3
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	61bb      	str	r3, [r7, #24]
  return result;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].SETx1R) +
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	33bc      	adds	r3, #188	; 0xbc
 800139e:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <LL_HRTIM_OUT_SetOutputSetSrc+0x60>)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].SETx1R) +
 80013a8:	440b      	add	r3, r1
 80013aa:	623b      	str	r3, [r7, #32]
  WRITE_REG(*pReg, SetSrc);
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	372c      	adds	r7, #44	; 0x2c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	080043b8 	.word	0x080043b8

080013c4 <LL_HRTIM_OUT_SetOutputResetSrc>:
  *         @arg @ref LL_HRTIM_CROSSBAR_EEV_10
  *         @arg @ref LL_HRTIM_CROSSBAR_UPDATE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetOutputResetSrc(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t ResetSrc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	613b      	str	r3, [r7, #16]
  return result;
 80013dc:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	61bb      	str	r3, [r7, #24]
  return result;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTx1R) +
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	33c0      	adds	r3, #192	; 0xc0
 8001402:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_SETxR[iOutput]));
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <LL_HRTIM_OUT_SetOutputResetSrc+0x60>)
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTx1R) +
 800140c:	440b      	add	r3, r1
 800140e:	623b      	str	r3, [r7, #32]
  WRITE_REG(*pReg, ResetSrc);
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	372c      	adds	r7, #44	; 0x2c
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	080043b8 	.word	0x080043b8

08001428 <LL_HRTIM_OUT_SetPolarity>:
  *         @arg @ref LL_HRTIM_OUT_POSITIVE_POLARITY
  *         @arg @ref LL_HRTIM_OUT_NEGATIVE_POLARITY
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetPolarity(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t Polarity)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	613b      	str	r3, [r7, #16]
  return result;
 8001440:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	61bb      	str	r3, [r7, #24]
  return result;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	33e4      	adds	r3, #228	; 0xe4
 8001466:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8001468:	4a10      	ldr	r2, [pc, #64]	; (80014ac <LL_HRTIM_OUT_SetPolarity+0x84>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001470:	440b      	add	r3, r1
 8001472:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, (HRTIM_OUTR_POL1 << REG_SHIFT_TAB_OUTxR[iOutput]), (Polarity << REG_SHIFT_TAB_OUTxR[iOutput]));
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LL_HRTIM_OUT_SetPolarity+0x88>)
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	440b      	add	r3, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	2302      	movs	r3, #2
 8001484:	408b      	lsls	r3, r1
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	4909      	ldr	r1, [pc, #36]	; (80014b0 <LL_HRTIM_OUT_SetPolarity+0x88>)
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	440b      	add	r3, r1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	408b      	lsls	r3, r1
 8001498:	431a      	orrs	r2, r3
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	372c      	adds	r7, #44	; 0x2c
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	080043cc 	.word	0x080043cc
 80014b0:	08004420 	.word	0x08004420

080014b4 <LL_HRTIM_OUT_SetIdleMode>:
  *         @arg @ref LL_HRTIM_OUT_NO_IDLE
  *         @arg @ref LL_HRTIM_OUT_IDLE_WHEN_BURST
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleMode)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	613b      	str	r3, [r7, #16]
  return result;
 80014cc:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	61bb      	str	r3, [r7, #24]
  return result;
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	33e4      	adds	r3, #228	; 0xe4
 80014f2:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <LL_HRTIM_OUT_SetIdleMode+0x84>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80014fc:	440b      	add	r3, r1
 80014fe:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLM1 << (REG_SHIFT_TAB_OUTxR[iOutput])), (IdleMode << (REG_SHIFT_TAB_OUTxR[iOutput])));
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	490d      	ldr	r1, [pc, #52]	; (800153c <LL_HRTIM_OUT_SetIdleMode+0x88>)
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	440b      	add	r3, r1
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	2304      	movs	r3, #4
 8001510:	408b      	lsls	r3, r1
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	4909      	ldr	r1, [pc, #36]	; (800153c <LL_HRTIM_OUT_SetIdleMode+0x88>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	440b      	add	r3, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4619      	mov	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	408b      	lsls	r3, r1
 8001524:	431a      	orrs	r2, r3
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	372c      	adds	r7, #44	; 0x2c
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	080043cc 	.word	0x080043cc
 800153c:	08004420 	.word	0x08004420

08001540 <LL_HRTIM_OUT_SetIdleLevel>:
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_ACTIVE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleLevel(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleLevel)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	613b      	str	r3, [r7, #16]
  return result;
 8001558:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2da      	uxtb	r2, r3
 8001560:	2301      	movs	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	61bb      	str	r3, [r7, #24]
  return result;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	33e4      	adds	r3, #228	; 0xe4
 800157e:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <LL_HRTIM_OUT_SetIdleLevel+0x84>)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001588:	440b      	add	r3, r1
 800158a:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLES1 << REG_SHIFT_TAB_OUTxR[iOutput]), (IdleLevel << REG_SHIFT_TAB_OUTxR[iOutput]));
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LL_HRTIM_OUT_SetIdleLevel+0x88>)
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	440b      	add	r3, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	2308      	movs	r3, #8
 800159c:	408b      	lsls	r3, r1
 800159e:	43db      	mvns	r3, r3
 80015a0:	401a      	ands	r2, r3
 80015a2:	4909      	ldr	r1, [pc, #36]	; (80015c8 <LL_HRTIM_OUT_SetIdleLevel+0x88>)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	440b      	add	r3, r1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	408b      	lsls	r3, r1
 80015b0:	431a      	orrs	r2, r3
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	372c      	adds	r7, #44	; 0x2c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	080043cc 	.word	0x080043cc
 80015c8:	08004420 	.word	0x08004420

080015cc <LL_HRTIM_OUT_SetFaultState>:
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_HIGHZ
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetFaultState(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t FaultState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b08b      	sub	sp, #44	; 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	613b      	str	r3, [r7, #16]
  return result;
 80015e4:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	61bb      	str	r3, [r7, #24]
  return result;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	33e4      	adds	r3, #228	; 0xe4
 800160a:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <LL_HRTIM_OUT_SetFaultState+0x84>)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001614:	440b      	add	r3, r1
 8001616:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, (HRTIM_OUTR_FAULT1 << REG_SHIFT_TAB_OUTxR[iOutput]), (FaultState << REG_SHIFT_TAB_OUTxR[iOutput]));
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	490d      	ldr	r1, [pc, #52]	; (8001654 <LL_HRTIM_OUT_SetFaultState+0x88>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	440b      	add	r3, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	2330      	movs	r3, #48	; 0x30
 8001628:	408b      	lsls	r3, r1
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <LL_HRTIM_OUT_SetFaultState+0x88>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	408b      	lsls	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	601a      	str	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	; 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	080043cc 	.word	0x080043cc
 8001654:	08004420 	.word	0x08004420

08001658 <LL_HRTIM_OUT_SetChopperMode>:
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_DISABLED
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetChopperMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t ChopperMode)
{
 8001658:	b480      	push	{r7}
 800165a:	b08b      	sub	sp, #44	; 0x2c
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	613b      	str	r3, [r7, #16]
  return result;
 8001670:	693b      	ldr	r3, [r7, #16]
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	61bb      	str	r3, [r7, #24]
  return result;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	33e4      	adds	r3, #228	; 0xe4
 8001696:	4619      	mov	r1, r3
                                                              REG_OFFSET_TAB_OUTxR[iOutput]));
 8001698:	4a10      	ldr	r2, [pc, #64]	; (80016dc <LL_HRTIM_OUT_SetChopperMode+0x84>)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80016a0:	440b      	add	r3, r1
 80016a2:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, (HRTIM_OUTR_CHP1 << REG_SHIFT_TAB_OUTxR[iOutput]), (ChopperMode << REG_SHIFT_TAB_OUTxR[iOutput]));
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	490d      	ldr	r1, [pc, #52]	; (80016e0 <LL_HRTIM_OUT_SetChopperMode+0x88>)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	440b      	add	r3, r1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2340      	movs	r3, #64	; 0x40
 80016b4:	408b      	lsls	r3, r1
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <LL_HRTIM_OUT_SetChopperMode+0x88>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	440b      	add	r3, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	408b      	lsls	r3, r1
 80016c8:	431a      	orrs	r2, r3
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	601a      	str	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	372c      	adds	r7, #44	; 0x2c
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	080043cc 	.word	0x080043cc
 80016e0:	08004420 	.word	0x08004420

080016e4 <LL_HRTIM_IsActiveFlag_DLLRDY>:
  * @rmtoll ISR     DLLRDY           LL_HRTIM_IsActiveFlag_DLLRDY
  * @param  HRTIMx High Resolution Timer instance
  * @retval State of DLLRDY bit in HRTIM_ISR register (1 or 0).
  */
__STATIC_INLINE uint32_t LL_HRTIM_IsActiveFlag_DLLRDY(const HRTIM_TypeDef *HRTIMx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(HRTIMx->sCommonRegs.ISR, HRTIM_ISR_DLLRDY) == (HRTIM_ISR_DLLRDY)) ? 1UL : 0UL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d101      	bne.n	8001700 <LL_HRTIM_IsActiveFlag_DLLRDY+0x1c>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_HRTIM_IsActiveFlag_DLLRDY+0x1e>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000

08001740 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <LL_APB2_GRP1_EnableClock+0x2c>)
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <LL_APB2_GRP1_EnableClock+0x2c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000

08001770 <LL_DMA_SetDataTransferDirection>:
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001790:	f023 0310 	bic.w	r3, r3, #16
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	3a01      	subs	r2, #1
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <LL_DMA_SetDataTransferDirection+0x48>)
 800179a:	5c8a      	ldrb	r2, [r1, r2]
 800179c:	4611      	mov	r1, r2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	440a      	add	r2, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	0800442c 	.word	0x0800442c

080017bc <LL_DMA_SetMode>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <LL_DMA_SetMode+0x44>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 0220 	bic.w	r2, r3, #32
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3b01      	subs	r3, #1
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <LL_DMA_SetMode+0x44>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	4619      	mov	r1, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	440b      	add	r3, r1
 80017ea:	4619      	mov	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	0800442c 	.word	0x0800442c

08001804 <LL_DMA_SetPeriphIncMode>:
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <LL_DMA_SetPeriphIncMode+0x44>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	3b01      	subs	r3, #1
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <LL_DMA_SetPeriphIncMode+0x44>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	4619      	mov	r1, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	440b      	add	r3, r1
 8001832:	4619      	mov	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	0800442c 	.word	0x0800442c

0800184c <LL_DMA_SetMemoryIncMode>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3b01      	subs	r3, #1
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <LL_DMA_SetMemoryIncMode+0x44>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3b01      	subs	r3, #1
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <LL_DMA_SetMemoryIncMode+0x44>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	4619      	mov	r1, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	440b      	add	r3, r1
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	0800442c 	.word	0x0800442c

08001894 <LL_DMA_SetPeriphSize>:
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <LL_DMA_SetPeriphSize+0x44>)
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	461a      	mov	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <LL_DMA_SetPeriphSize+0x44>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	4619      	mov	r1, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	440b      	add	r3, r1
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	0800442c 	.word	0x0800442c

080018dc <LL_DMA_SetMemorySize>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <LL_DMA_SetMemorySize+0x44>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	3b01      	subs	r3, #1
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <LL_DMA_SetMemorySize+0x44>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	4619      	mov	r1, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	440b      	add	r3, r1
 800190a:	4619      	mov	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	0800442c 	.word	0x0800442c

08001924 <LL_DMA_SetChannelPriorityLevel>:
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3b01      	subs	r3, #1
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	461a      	mov	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3b01      	subs	r3, #1
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	4619      	mov	r1, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	440b      	add	r3, r1
 8001952:	4619      	mov	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	0800442c 	.word	0x0800442c

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001970:	f000 fc42 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001974:	f000 f80d 	bl	8001992 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001978:	f000 fae2 	bl	8001f40 <MX_GPIO_Init>
  MX_DMA_Init();
 800197c:	f000 faba 	bl	8001ef4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001980:	f000 f86a 	bl	8001a58 <MX_ADC1_Init>
  MX_HRTIM1_Init();
 8001984:	f000 f9e2 	bl	8001d4c <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001988:	f7fe fe50 	bl	800062c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800198c:	f7fe fea4 	bl	80006d8 <loop>
 8001990:	e7fc      	b.n	800198c <main+0x20>

08001992 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b096      	sub	sp, #88	; 0x58
 8001996:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199c:	2228      	movs	r2, #40	; 0x28
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fce3 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d6:	2301      	movs	r3, #1
 80019d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fef2 	bl	80027d8 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80019fa:	f000 faf9 	bl	8001ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 ff1a 	bl	8003854 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a26:	f000 fae3 	bl	8001ff0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 8001a2a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001a2e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a34:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 8001a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 f8ee 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a4a:	f000 fad1 	bl	8001ff0 <Error_Handler>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3758      	adds	r7, #88	; 0x58
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b098      	sub	sp, #96	; 0x60
 8001a5c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8001a9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a9e:	f7ff fe37 	bl	8001710 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001aa2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001aa6:	f7ff fe33 	bl	8001710 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001aaa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aae:	f7ff fe2f 	bl	8001710 <LL_AHB1_GRP1_EnableClock>
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  PA2   ------> ADC1_IN3
  PA3   ------> ADC1_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4897      	ldr	r0, [pc, #604]	; (8001d20 <MX_ADC1_Init+0x2c8>)
 8001ac4:	f002 fbbd 	bl	8004242 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001ac8:	230f      	movs	r3, #15
 8001aca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f002 fbb1 	bl	8004242 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	488f      	ldr	r0, [pc, #572]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001ae6:	f7ff fe43 	bl	8001770 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 8001aea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001aee:	2101      	movs	r1, #1
 8001af0:	488c      	ldr	r0, [pc, #560]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001af2:	f7ff ff17 	bl	8001924 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001af6:	2220      	movs	r2, #32
 8001af8:	2101      	movs	r1, #1
 8001afa:	488a      	ldr	r0, [pc, #552]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001afc:	f7ff fe5e 	bl	80017bc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2101      	movs	r1, #1
 8001b04:	4887      	ldr	r0, [pc, #540]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001b06:	f7ff fe7d 	bl	8001804 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4885      	ldr	r0, [pc, #532]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001b10:	f7ff fe9c 	bl	800184c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4882      	ldr	r0, [pc, #520]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001b1c:	f7ff feba 	bl	8001894 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	2101      	movs	r1, #1
 8001b26:	487f      	ldr	r0, [pc, #508]	; (8001d24 <MX_ADC1_Init+0x2cc>)
 8001b28:	f7ff fed8 	bl	80018dc <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b2c:	f7fe fe74 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fec4 	bl	80008c4 <NVIC_EncodePriority>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	2012      	movs	r0, #18
 8001b42:	f7fe fe95 	bl	8000870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b46:	2012      	movs	r0, #18
 8001b48:	f7fe fe74 	bl	8000834 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b62:	f002 f9f9 	bl	8003f58 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG1;
 8001b66:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8001b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b8c:	f002 fa0a 	bl	8003fa4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4862      	ldr	r0, [pc, #392]	; (8001d28 <MX_ADC1_Init+0x2d0>)
 8001ba0:	f002 f99a 	bl	8003ed8 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 8001ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001bac:	f7fe febd 	bl	800092a <LL_ADC_REG_SetTriggerEdge>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001bb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001bb4:	f7fe fff8 	bl	8000ba8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001bb8:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <MX_ADC1_Init+0x2d4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	4a5c      	ldr	r2, [pc, #368]	; (8001d30 <MX_ADC1_Init+0x2d8>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	099a      	lsrs	r2, r3, #6
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <MX_ADC1_Init+0x2dc>)
 8001bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001bda:	e002      	b.n	8001be2 <MX_ADC1_Init+0x18a>
  {
    wait_loop_index--;
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bde:	3b01      	subs	r3, #1
 8001be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f9      	bne.n	8001bdc <MX_ADC1_Init+0x184>
  }

  /** Configure injected channel ADC_JSQR register
  */
  LL_ADC_INJ_ConfigQueueContext(ADC1, LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2, LL_ADC_INJ_TRIG_EXT_RISING, LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS, LL_ADC_CHANNEL_4, LL_ADC_CHANNEL_6, LL_ADC_CHANNEL_8, LL_ADC_CHANNEL_9);
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <MX_ADC1_Init+0x2e0>)
 8001bea:	9303      	str	r3, [sp, #12]
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <MX_ADC1_Init+0x2e4>)
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <MX_ADC1_Init+0x2e8>)
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <MX_ADC1_Init+0x2ec>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2164      	movs	r1, #100	; 0x64
 8001bfe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c02:	f7fe ff29 	bl	8000a58 <LL_ADC_INJ_ConfigQueueContext>
  LL_ADC_INJ_SetTrigAuto(ADC1, LL_ADC_INJ_TRIG_INDEPENDENT);
 8001c06:	2100      	movs	r1, #0
 8001c08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c0c:	f7fe fefd 	bl	8000a0a <LL_ADC_INJ_SetTrigAuto>
  LL_ADC_INJ_SetSequencerDiscont(ADC1, LL_ADC_INJ_SEQ_DISCONT_DISABLE);
 8001c10:	2100      	movs	r1, #0
 8001c12:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c16:	f7fe fee5 	bl	80009e4 <LL_ADC_INJ_SetSequencerDiscont>

  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE);
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c20:	f7fe ff06 	bl	8000a30 <LL_ADC_INJ_SetQueueMode>
  LL_ADC_DisableIT_JEOC(ADC1);
 8001c24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c28:	f7fe ffd8 	bl	8000bdc <LL_ADC_DisableIT_JEOC>
  LL_ADC_DisableIT_JEOS(ADC1);
 8001c2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c30:	f7fe ffe4 	bl	8000bfc <LL_ADC_DisableIT_JEOS>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_4CYCLES_5);
 8001c34:	2202      	movs	r2, #2
 8001c36:	4943      	ldr	r1, [pc, #268]	; (8001d44 <MX_ADC1_Init+0x2ec>)
 8001c38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c3c:	f7fe ff44 	bl	8000ac8 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8001c40:	227f      	movs	r2, #127	; 0x7f
 8001c42:	4940      	ldr	r1, [pc, #256]	; (8001d44 <MX_ADC1_Init+0x2ec>)
 8001c44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c48:	f7fe ff8a 	bl	8000b60 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8001c4c:	2140      	movs	r1, #64	; 0x40
 8001c4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c52:	f7fe feb4 	bl	80009be <LL_ADC_INJ_SetTriggerEdge>

  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE);
 8001c56:	2100      	movs	r1, #0
 8001c58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c5c:	f7fe fee8 	bl	8000a30 <LL_ADC_INJ_SetQueueMode>
  LL_ADC_DisableIT_JEOC(ADC1);
 8001c60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c64:	f7fe ffba 	bl	8000bdc <LL_ADC_DisableIT_JEOC>
  LL_ADC_DisableIT_JEOS(ADC1);
 8001c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c6c:	f7fe ffc6 	bl	8000bfc <LL_ADC_DisableIT_JEOS>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_4CYCLES_5);
 8001c70:	2202      	movs	r2, #2
 8001c72:	4933      	ldr	r1, [pc, #204]	; (8001d40 <MX_ADC1_Init+0x2e8>)
 8001c74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c78:	f7fe ff26 	bl	8000ac8 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 8001c7c:	227f      	movs	r2, #127	; 0x7f
 8001c7e:	4930      	ldr	r1, [pc, #192]	; (8001d40 <MX_ADC1_Init+0x2e8>)
 8001c80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c84:	f7fe ff6c 	bl	8000b60 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c8e:	f7fe fe96 	bl	80009be <LL_ADC_INJ_SetTriggerEdge>

  /** Configure Injected Channel
  */
  LL_ADC_INJ_SetQueueMode(ADC1, LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE);
 8001c92:	2100      	movs	r1, #0
 8001c94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c98:	f7fe feca 	bl	8000a30 <LL_ADC_INJ_SetQueueMode>
  LL_ADC_DisableIT_JEOC(ADC1);
 8001c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ca0:	f7fe ff9c 	bl	8000bdc <LL_ADC_DisableIT_JEOC>
  LL_ADC_DisableIT_JEOS(ADC1);
 8001ca4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ca8:	f7fe ffa8 	bl	8000bfc <LL_ADC_DisableIT_JEOS>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_4CYCLES_5);
 8001cac:	2202      	movs	r2, #2
 8001cae:	4923      	ldr	r1, [pc, #140]	; (8001d3c <MX_ADC1_Init+0x2e4>)
 8001cb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cb4:	f7fe ff08 	bl	8000ac8 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 8001cb8:	227f      	movs	r2, #127	; 0x7f
 8001cba:	4920      	ldr	r1, [pc, #128]	; (8001d3c <MX_ADC1_Init+0x2e4>)
 8001cbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cc0:	f7fe ff4e 	bl	8000b60 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_INJ_SetTriggerEdge(ADC1, LL_ADC_INJ_TRIG_EXT_RISING);
 8001cc4:	2140      	movs	r1, #64	; 0x40
 8001cc6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cca:	f7fe fe78 	bl	80009be <LL_ADC_INJ_SetTriggerEdge>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_9);
 8001cce:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <MX_ADC1_Init+0x2e0>)
 8001cd0:	2106      	movs	r1, #6
 8001cd2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cd6:	f7fe fe3b 	bl	8000950 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_19CYCLES_5);
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4916      	ldr	r1, [pc, #88]	; (8001d38 <MX_ADC1_Init+0x2e0>)
 8001cde:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ce2:	f7fe fef1 	bl	8000ac8 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SINGLE_ENDED);
 8001ce6:	227f      	movs	r2, #127	; 0x7f
 8001ce8:	4913      	ldr	r1, [pc, #76]	; (8001d38 <MX_ADC1_Init+0x2e0>)
 8001cea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cee:	f7fe ff37 	bl	8000b60 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_7);
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <MX_ADC1_Init+0x2f0>)
 8001cf4:	210c      	movs	r1, #12
 8001cf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001cfa:	f7fe fe29 	bl	8000950 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_19CYCLES_5);
 8001cfe:	2204      	movs	r2, #4
 8001d00:	4911      	ldr	r1, [pc, #68]	; (8001d48 <MX_ADC1_Init+0x2f0>)
 8001d02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d06:	f7fe fedf 	bl	8000ac8 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8001d0a:	227f      	movs	r2, #127	; 0x7f
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <MX_ADC1_Init+0x2f0>)
 8001d0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d12:	f7fe ff25 	bl	8000b60 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3750      	adds	r7, #80	; 0x50
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	48000800 	.word	0x48000800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	50000300 	.word	0x50000300
 8001d2c:	20000104 	.word	0x20000104
 8001d30:	053e2d63 	.word	0x053e2d63
 8001d34:	cccccccd 	.word	0xcccccccd
 8001d38:	25b00200 	.word	0x25b00200
 8001d3c:	21800100 	.word	0x21800100
 8001d40:	19200040 	.word	0x19200040
 8001d44:	10c00010 	.word	0x10c00010
 8001d48:	1d500080 	.word	0x1d500080

08001d4c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_HRTIM1);
 8001d62:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001d66:	f7ff fceb 	bl	8001740 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  LL_HRTIM_ConfigDLLCalibration(HRTIM1, LL_HRTIM_DLLCALIBRATION_MODE_CONTINUOUS, LL_HRTIM_DLLCALIBRATION_RATE_14);
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	485f      	ldr	r0, [pc, #380]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001d70:	f7fe ffa0 	bl	8000cb4 <LL_HRTIM_ConfigDLLCalibration>
  /* Poll for DLL end of calibration */
#if (USE_TIMEOUT == 1)
  uint32_t Timeout = 10; /* Timeout Initialization */
#endif  /*USE_TIMEOUT*/

  while(LL_HRTIM_IsActiveFlag_DLLRDY(HRTIM1) == RESET){
 8001d74:	bf00      	nop
 8001d76:	485d      	ldr	r0, [pc, #372]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001d78:	f7ff fcb4 	bl	80016e4 <LL_HRTIM_IsActiveFlag_DLLRDY>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f9      	beq.n	8001d76 <MX_HRTIM1_Init+0x2a>
        }
    }
#endif  /* USE_TIMEOUT */
  }

  LL_HRTIM_ConfigADCTrig(HRTIM1, LL_HRTIM_ADCTRIG_2, LL_HRTIM_ADCTRIG_UPDATE_TIMER_C, LL_HRTIM_ADCTRIG_SRC24_TIMCPER);
 8001d82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d86:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4857      	ldr	r0, [pc, #348]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001d8e:	f7fe ff5b 	bl	8000c48 <LL_HRTIM_ConfigADCTrig>
  LL_HRTIM_TIM_SetPrescaler(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_PRESCALERRATIO_MUL8);
 8001d92:	2202      	movs	r2, #2
 8001d94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001d98:	4854      	ldr	r0, [pc, #336]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001d9a:	f7fe ffa3 	bl	8000ce4 <LL_HRTIM_TIM_SetPrescaler>
  LL_HRTIM_TIM_SetCounterMode(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_MODE_CONTINUOUS);
 8001d9e:	2208      	movs	r2, #8
 8001da0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001da4:	4851      	ldr	r0, [pc, #324]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001da6:	f7fe ffc9 	bl	8000d3c <LL_HRTIM_TIM_SetCounterMode>
  LL_HRTIM_TIM_SetPeriod(HRTIM1, LL_HRTIM_TIMER_C, 11520);
 8001daa:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8001dae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001db2:	484e      	ldr	r0, [pc, #312]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001db4:	f7ff f9a8 	bl	8001108 <LL_HRTIM_TIM_SetPeriod>
  LL_HRTIM_TIM_SetRepetition(HRTIM1, LL_HRTIM_TIMER_C, 0x00);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001dbe:	484b      	ldr	r0, [pc, #300]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001dc0:	f7ff f9ce 	bl	8001160 <LL_HRTIM_TIM_SetRepetition>
  LL_HRTIM_TIM_SetDACTrig(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_DACTRIG_NONE);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001dca:	4848      	ldr	r0, [pc, #288]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001dcc:	f7ff f85a 	bl	8000e84 <LL_HRTIM_TIM_SetDACTrig>
  LL_HRTIM_TIM_DisableHalfMode(HRTIM1, LL_HRTIM_TIMER_C);
 8001dd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001dd4:	4845      	ldr	r0, [pc, #276]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001dd6:	f7fe ffdd 	bl	8000d94 <LL_HRTIM_TIM_DisableHalfMode>
  LL_HRTIM_TIM_DisableStartOnSync(HRTIM1, LL_HRTIM_TIMER_C);
 8001dda:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001dde:	4843      	ldr	r0, [pc, #268]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001de0:	f7ff f800 	bl	8000de4 <LL_HRTIM_TIM_DisableStartOnSync>
  LL_HRTIM_TIM_DisableResetOnSync(HRTIM1, LL_HRTIM_TIMER_C);
 8001de4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001de8:	4840      	ldr	r0, [pc, #256]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001dea:	f7ff f823 	bl	8000e34 <LL_HRTIM_TIM_DisableResetOnSync>
  LL_HRTIM_TIM_DisablePreload(HRTIM1, LL_HRTIM_TIMER_C);
 8001dee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001df2:	483e      	ldr	r0, [pc, #248]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001df4:	f7ff f872 	bl	8000edc <LL_HRTIM_TIM_DisablePreload>
  LL_HRTIM_TIM_SetUpdateGating(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_UPDATEGATING_INDEPENDENT);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001dfe:	483b      	ldr	r0, [pc, #236]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e00:	f7ff f8ce 	bl	8000fa0 <LL_HRTIM_TIM_SetUpdateGating>
  LL_HRTIM_TIM_SetUpdateTrig(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_UPDATETRIG_NONE|LL_HRTIM_UPDATETRIG_NONE);
 8001e04:	2200      	movs	r2, #0
 8001e06:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e0a:	4838      	ldr	r0, [pc, #224]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e0c:	f7ff f88e 	bl	8000f2c <LL_HRTIM_TIM_SetUpdateTrig>
  LL_HRTIM_TIM_SetResetTrig(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_RESETTRIG_NONE);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e16:	4835      	ldr	r0, [pc, #212]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e18:	f7ff fa26 	bl	8001268 <LL_HRTIM_TIM_SetResetTrig>
  LL_HRTIM_TIM_DisablePushPullMode(HRTIM1, LL_HRTIM_TIMER_C);
 8001e1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e20:	4832      	ldr	r0, [pc, #200]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e22:	f7ff f8f7 	bl	8001014 <LL_HRTIM_TIM_DisablePushPullMode>
  LL_HRTIM_TIM_DisableDeadTime(HRTIM1, LL_HRTIM_TIMER_C);
 8001e26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e2a:	4830      	ldr	r0, [pc, #192]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e2c:	f7ff fa44 	bl	80012b8 <LL_HRTIM_TIM_DisableDeadTime>
  LL_HRTIM_TIM_SetBurstModeOption(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_BURSTMODE_MAINTAINCLOCK);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e36:	482d      	ldr	r0, [pc, #180]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e38:	f7ff fa68 	bl	800130c <LL_HRTIM_TIM_SetBurstModeOption>
  LL_HRTIM_ForceUpdate(HRTIM1, LL_HRTIM_TIMER_C);
 8001e3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e40:	482a      	ldr	r0, [pc, #168]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e42:	f7fe feeb 	bl	8000c1c <LL_HRTIM_ForceUpdate>
  LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_C, 11520);
 8001e46:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8001e4a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e4e:	4827      	ldr	r0, [pc, #156]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e50:	f7ff f9b2 	bl	80011b8 <LL_HRTIM_TIM_SetCompare1>
  LL_HRTIM_TIM_SetCompare2(HRTIM1, LL_HRTIM_TIMER_C, 11520);
 8001e54:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8001e58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e5e:	f7ff f9d7 	bl	8001210 <LL_HRTIM_TIM_SetCompare2>
  LL_HRTIM_TIM_SetCompareMode(HRTIM1, LL_HRTIM_TIMER_C, LL_HRTIM_COMPAREUNIT_2, LL_HRTIM_COMPAREMODE_REGULAR);
 8001e62:	2300      	movs	r3, #0
 8001e64:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001e6c:	481f      	ldr	r0, [pc, #124]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e6e:	f7ff f8fb 	bl	8001068 <LL_HRTIM_TIM_SetCompareMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2110      	movs	r1, #16
 8001e76:	481d      	ldr	r0, [pc, #116]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e78:	f7ff fad6 	bl	8001428 <LL_HRTIM_OUT_SetPolarity>
  LL_HRTIM_OUT_SetOutputSetSrc(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_CROSSBAR_TIMCMP1);
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	2110      	movs	r1, #16
 8001e80:	481a      	ldr	r0, [pc, #104]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e82:	f7ff fa6d 	bl	8001360 <LL_HRTIM_OUT_SetOutputSetSrc>
  LL_HRTIM_OUT_SetOutputResetSrc(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_CROSSBAR_TIMCMP2);
 8001e86:	2210      	movs	r2, #16
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4818      	ldr	r0, [pc, #96]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e8c:	f7ff fa9a 	bl	80013c4 <LL_HRTIM_OUT_SetOutputResetSrc>
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_OUT_NO_IDLE);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2110      	movs	r1, #16
 8001e94:	4815      	ldr	r0, [pc, #84]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001e96:	f7ff fb0d 	bl	80014b4 <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	4813      	ldr	r0, [pc, #76]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001ea0:	f7ff fb4e 	bl	8001540 <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4810      	ldr	r0, [pc, #64]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001eaa:	f7ff fb8f 	bl	80015cc <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TC1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	480e      	ldr	r0, [pc, #56]	; (8001eec <MX_HRTIM1_Init+0x1a0>)
 8001eb4:	f7ff fbd0 	bl	8001658 <LL_HRTIM_OUT_SetChopperMode>
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001eb8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ebc:	f7ff fc28 	bl	8001710 <LL_AHB1_GRP1_EnableClock>
  /**HRTIM1 GPIO Configuration
  PB12   ------> HRTIM1_CHC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001ed6:	230d      	movs	r3, #13
 8001ed8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	463b      	mov	r3, r7
 8001edc:	4619      	mov	r1, r3
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_HRTIM1_Init+0x1a4>)
 8001ee0:	f002 f9af 	bl	8004242 <LL_GPIO_Init>

}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40017400 	.word	0x40017400
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_DMA_Init+0x48>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <MX_DMA_Init+0x48>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6153      	str	r3, [r2, #20]
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <MX_DMA_Init+0x48>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001f12:	f7fe fc81 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fcd1 	bl	80008c4 <NVIC_EncodePriority>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	200b      	movs	r0, #11
 8001f28:	f7fe fca2 	bl	8000870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f2c:	200b      	movs	r0, #11
 8001f2e:	f7fe fc81 	bl	8000834 <__NVIC_EnableIRQ>

}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000

08001f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f60:	6153      	str	r3, [r2, #20]
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f78:	6153      	str	r3, [r2, #20]
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	6153      	str	r3, [r2, #20]
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6153      	str	r3, [r2, #20]
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_GPIO_Init+0xa8>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_8, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <MX_GPIO_Init+0xac>)
 8001fbe:	f000 fbd9 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8;
 8001fc2:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4804      	ldr	r0, [pc, #16]	; (8001fec <MX_GPIO_Init+0xac>)
 8001fdc:	f000 fa58 	bl	8002490 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000400 	.word	0x48000400

08001ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
}
 8001ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <Error_Handler+0x8>
	...

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x44>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000

08002044 <LL_ADC_IsActiveFlag_JEOC>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_ADC_ClearFlag_JEOC>:
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	601a      	str	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_DMA_IsActiveFlag_TC1>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b02      	cmp	r3, #2
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_DMA_ClearFlag_GI1>:
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	605a      	str	r2, [r3, #4]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_DMA_ClearFlag_TC1>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	605a      	str	r2, [r3, #4]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <NMI_Handler+0x4>

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <HardFault_Handler+0x4>

080020ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <MemManage_Handler+0x4>

080020f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <BusFault_Handler+0x4>

080020f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <UsageFault_Handler+0x4>

080020fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212a:	f000 f8ab 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA1) != 0){
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <DMA1_Channel1_IRQHandler+0x24>)
 800213a:	f7ff ffa3 	bl	8002084 <LL_DMA_IsActiveFlag_TC1>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <DMA1_Channel1_IRQHandler+0x20>
		LL_DMA_ClearFlag_TC1(DMA1);
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <DMA1_Channel1_IRQHandler+0x24>)
 8002146:	f7ff ffbd 	bl	80020c4 <LL_DMA_ClearFlag_TC1>
		LL_DMA_ClearFlag_GI1(DMA1);
 800214a:	4803      	ldr	r0, [pc, #12]	; (8002158 <DMA1_Channel1_IRQHandler+0x24>)
 800214c:	f7ff ffad 	bl	80020aa <LL_DMA_ClearFlag_GI1>
		ISR_DMA1_TC();
 8002150:	f7fe fb24 	bl	800079c <ISR_DMA1_TC>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40020000 	.word	0x40020000

0800215c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	if(LL_ADC_IsActiveFlag_JEOC(ADC1) != 0){
 8002160:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002164:	f7ff ff6e 	bl	8002044 <LL_ADC_IsActiveFlag_JEOC>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <ADC1_2_IRQHandler+0x1e>
		LL_ADC_ClearFlag_JEOC(ADC1);
 800216e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002172:	f7ff ff7a 	bl	800206a <LL_ADC_ClearFlag_JEOC>
		ISR_ADC1_JEOC();
 8002176:	f7fe fac3 	bl	8000700 <ISR_ADC1_JEOC>
  /* USER CODE END ADC1_2_IRQn 0 */

  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a8:	f7ff ffea 	bl	8002180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ae:	490d      	ldr	r1, [pc, #52]	; (80021e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <LoopForever+0xe>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c4:	4c0a      	ldr	r4, [pc, #40]	; (80021f0 <LoopForever+0x16>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f002 f8a7 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021d6:	f7ff fbc9 	bl	800196c <main>

080021da <LoopForever>:

LoopForever:
    b LoopForever
 80021da:	e7fe      	b.n	80021da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80021e8:	0800446c 	.word	0x0800446c
  ldr r2, =_sbss
 80021ec:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80021f0:	2000013c 	.word	0x2000013c

080021f4 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <CAN_RX0_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_Init+0x28>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_Init+0x28>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 f90d 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	200f      	movs	r0, #15
 8002210:	f000 f808 	bl	8002224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f7ff fef2 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_InitTick+0x54>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_InitTick+0x58>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f917 	bl	8002476 <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f000 f8ed 	bl	800243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <HAL_InitTick+0x5c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000104 	.word	0x20000104
 800227c:	2000010c 	.word	0x2000010c
 8002280:	20000108 	.word	0x20000108

08002284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	2000010c 	.word	0x2000010c
 80022a8:	20000138 	.word	0x20000138

080022ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000138 	.word	0x20000138

080022c4 <__NVIC_SetPriorityGrouping>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_SetPriority>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	; (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	; (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f7ff ff8e 	bl	8002328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff47 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff5c 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff8e 	bl	800237c <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5d 	bl	8002328 <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffb0 	bl	80023e4 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e14e      	b.n	800273e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8140 	beq.w	8002738 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d005      	beq.n	80024d0 <HAL_GPIO_Init+0x40>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d130      	bne.n	8002532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002506:	2201      	movs	r2, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0201 	and.w	r2, r3, #1
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b03      	cmp	r3, #3
 800253c:	d017      	beq.n	800256e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d123      	bne.n	80025c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	6939      	ldr	r1, [r7, #16]
 80025be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 809a 	beq.w	8002738 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002604:	4b55      	ldr	r3, [pc, #340]	; (800275c <HAL_GPIO_Init+0x2cc>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a54      	ldr	r2, [pc, #336]	; (800275c <HAL_GPIO_Init+0x2cc>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b52      	ldr	r3, [pc, #328]	; (800275c <HAL_GPIO_Init+0x2cc>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800261c:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_GPIO_Init+0x2d0>)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002646:	d013      	beq.n	8002670 <HAL_GPIO_Init+0x1e0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_GPIO_Init+0x2d4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x1dc>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a45      	ldr	r2, [pc, #276]	; (8002768 <HAL_GPIO_Init+0x2d8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x1d8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a44      	ldr	r2, [pc, #272]	; (800276c <HAL_GPIO_Init+0x2dc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x1d4>
 8002660:	2303      	movs	r3, #3
 8002662:	e006      	b.n	8002672 <HAL_GPIO_Init+0x1e2>
 8002664:	2305      	movs	r3, #5
 8002666:	e004      	b.n	8002672 <HAL_GPIO_Init+0x1e2>
 8002668:	2302      	movs	r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_Init+0x1e2>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_GPIO_Init+0x1e2>
 8002670:	2300      	movs	r3, #0
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	f002 0203 	and.w	r2, r2, #3
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	4093      	lsls	r3, r2
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002682:	4937      	ldr	r1, [pc, #220]	; (8002760 <HAL_GPIO_Init+0x2d0>)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026b4:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_GPIO_Init+0x2e0>)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3301      	adds	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f aea9 	bne.w	80024a0 <HAL_GPIO_Init+0x10>
  }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000
 8002764:	48000400 	.word	0x48000400
 8002768:	48000800 	.word	0x48000800
 800276c:	48000c00 	.word	0x48000c00
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43d9      	mvns	r1, r3
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	400b      	ands	r3, r1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027de:	af00      	add	r7, sp, #0
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f001 b823 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 817d 	beq.w	8002b0e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002814:	4bbc      	ldr	r3, [pc, #752]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b04      	cmp	r3, #4
 800281e:	d00c      	beq.n	800283a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002820:	4bb9      	ldr	r3, [pc, #740]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d15c      	bne.n	80028e6 <HAL_RCC_OscConfig+0x10e>
 800282c:	4bb6      	ldr	r3, [pc, #728]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d155      	bne.n	80028e6 <HAL_RCC_OscConfig+0x10e>
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800284e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_RCC_OscConfig+0x94>
 8002866:	4ba8      	ldr	r3, [pc, #672]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e015      	b.n	8002898 <HAL_RCC_OscConfig+0xc0>
 800286c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002870:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002884:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002888:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002894:	4b9c      	ldr	r3, [pc, #624]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80028a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80028ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f042 0220 	orr.w	r2, r2, #32
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f002 021f 	and.w	r2, r2, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 811f 	beq.w	8002b0c <HAL_RCC_OscConfig+0x334>
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 8116 	bne.w	8002b0c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f000 bfaf 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x12e>
 80028f8:	4b83      	ldr	r3, [pc, #524]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a82      	ldr	r2, [pc, #520]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e036      	b.n	8002974 <HAL_RCC_OscConfig+0x19c>
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x158>
 8002916:	4b7c      	ldr	r3, [pc, #496]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7b      	ldr	r2, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a78      	ldr	r2, [pc, #480]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e021      	b.n	8002974 <HAL_RCC_OscConfig+0x19c>
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x184>
 8002942:	4b71      	ldr	r3, [pc, #452]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a70      	ldr	r2, [pc, #448]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6d      	ldr	r2, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x19c>
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002974:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f023 020f 	bic.w	r2, r3, #15
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	495f      	ldr	r1, [pc, #380]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 800298a:	4313      	orrs	r3, r2
 800298c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d059      	beq.n	8002a52 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7ff fc85 	bl	80022ac <HAL_GetTick>
 80029a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff fc80 	bl	80022ac <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d902      	bls.n	80029be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	f000 bf43 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
 80029be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80029d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <HAL_RCC_OscConfig+0x218>
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	e015      	b.n	8002a1c <HAL_RCC_OscConfig+0x244>
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a08:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a0c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a20:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a24:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a30:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a34:	fab2 f282 	clz	r2, r2
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	f042 0220 	orr.w	r2, r2, #32
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f002 021f 	and.w	r2, r2, #31
 8002a44:	2101      	movs	r1, #1
 8002a46:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ab      	beq.n	80029a8 <HAL_RCC_OscConfig+0x1d0>
 8002a50:	e05d      	b.n	8002b0e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7ff fc2b 	bl	80022ac <HAL_GetTick>
 8002a56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff fc26 	bl	80022ac <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d902      	bls.n	8002a72 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	f000 bee9 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
 8002a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a76:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2cc>
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	e015      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2f8>
 8002aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ac0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCC_OscConfig+0x330>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ad8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ae4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ab      	bne.n	8002a5c <HAL_RCC_OscConfig+0x284>
 8002b04:	e003      	b.n	8002b0e <HAL_RCC_OscConfig+0x336>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 817d 	beq.w	8002e1e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b24:	4ba6      	ldr	r3, [pc, #664]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b30:	4ba3      	ldr	r3, [pc, #652]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d172      	bne.n	8002c22 <HAL_RCC_OscConfig+0x44a>
 8002b3c:	4ba0      	ldr	r3, [pc, #640]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d16c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x44a>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_RCC_OscConfig+0x3a0>
 8002b72:	4b93      	ldr	r3, [pc, #588]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	e013      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b9c:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ba6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002bb2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002bb6:	fab2 f282 	clz	r2, r2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f042 0220 	orr.w	r2, r2, #32
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f002 021f 	and.w	r2, r2, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCC_OscConfig+0x410>
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f000 be2e 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	21f8      	movs	r1, #248	; 0xf8
 8002bfe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c06:	fa91 f1a1 	rbit	r1, r1
 8002c0a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c0e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c12:	fab1 f181 	clz	r1, r1
 8002c16:	b2c9      	uxtb	r1, r1
 8002c18:	408b      	lsls	r3, r1
 8002c1a:	4969      	ldr	r1, [pc, #420]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c20:	e0fd      	b.n	8002e1e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8088 	beq.w	8002d44 <HAL_RCC_OscConfig+0x56c>
 8002c34:	2301      	movs	r3, #1
 8002c36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fb24 	bl	80022ac <HAL_GetTick>
 8002c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7ff fb1f 	bl	80022ac <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f000 bde2 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
 8002c80:	2302      	movs	r3, #2
 8002c82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002caa:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e013      	b.n	8002cd8 <HAL_RCC_OscConfig+0x500>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002cc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002cde:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002cea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002cee:	fab2 f282 	clz	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0af      	beq.n	8002c6a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	21f8      	movs	r1, #248	; 0xf8
 8002d20:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d28:	fa91 f1a1 	rbit	r1, r1
 8002d2c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d30:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d34:	fab1 f181 	clz	r1, r1
 8002d38:	b2c9      	uxtb	r1, r1
 8002d3a:	408b      	lsls	r3, r1
 8002d3c:	4920      	ldr	r1, [pc, #128]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
 8002d42:	e06c      	b.n	8002e1e <HAL_RCC_OscConfig+0x646>
 8002d44:	2301      	movs	r3, #1
 8002d46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7ff fa9c 	bl	80022ac <HAL_GetTick>
 8002d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7ff fa97 	bl	80022ac <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d902      	bls.n	8002d90 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	f000 bd5a 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d104      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x5ec>
 8002dba:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <HAL_RCC_OscConfig+0x5e8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	e015      	b.n	8002dec <HAL_RCC_OscConfig+0x614>
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ddc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002de8:	4bc8      	ldr	r3, [pc, #800]	; (800310c <HAL_RCC_OscConfig+0x934>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002df2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002df6:	fa92 f2a2 	rbit	r2, r2
 8002dfa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002dfe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e02:	fab2 f282 	clz	r2, r2
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	f042 0220 	orr.w	r2, r2, #32
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f002 021f 	and.w	r2, r2, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ad      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8110 	beq.w	8003054 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d079      	beq.n	8002f38 <HAL_RCC_OscConfig+0x760>
 8002e44:	2301      	movs	r3, #1
 8002e46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4bab      	ldr	r3, [pc, #684]	; (8003110 <HAL_RCC_OscConfig+0x938>)
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7ff fa1d 	bl	80022ac <HAL_GetTick>
 8002e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e78:	f7ff fa18 	bl	80022ac <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d902      	bls.n	8002e8e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	f000 bcdb 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ecc:	2202      	movs	r2, #2
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fa93 f2a3 	rbit	r2, r3
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ee6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x934>)
 8002eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	6019      	str	r1, [r3, #0]
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f1a3 	rbit	r1, r3
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f0e:	6019      	str	r1, [r3, #0]
  return result;
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0a0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x6a0>
 8002f36:	e08d      	b.n	8003054 <HAL_RCC_OscConfig+0x87c>
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f5a:	601a      	str	r2, [r3, #0]
  return result;
 8002f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b68      	ldr	r3, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x938>)
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	461a      	mov	r2, r3
 8002f76:	2300      	movs	r3, #0
 8002f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff f997 	bl	80022ac <HAL_GetTick>
 8002f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f84:	f7ff f992 	bl	80022ac <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d902      	bls.n	8002f9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	f000 bc55 	b.w	8003844 <HAL_RCC_OscConfig+0x106c>
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003004:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCC_OscConfig+0x934>)
 8003008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003012:	2102      	movs	r1, #2
 8003014:	6019      	str	r1, [r3, #0]
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f1a3 	rbit	r1, r3
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800302c:	6019      	str	r1, [r3, #0]
  return result;
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d197      	bne.n	8002f84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 81a1 	beq.w	80033ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x934>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307c:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_RCC_OscConfig+0x934>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_RCC_OscConfig+0x934>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003086:	61d3      	str	r3, [r2, #28]
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCC_OscConfig+0x934>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_RCC_OscConfig+0x93c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11a      	bne.n	80030ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <HAL_RCC_OscConfig+0x93c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a16      	ldr	r2, [pc, #88]	; (8003114 <HAL_RCC_OscConfig+0x93c>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7ff f8f3 	bl	80022ac <HAL_GetTick>
 80030c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	e009      	b.n	80030e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7ff f8ee 	bl	80022ac <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	; 0x64
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e3b1      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_OscConfig+0x93c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ef      	beq.n	80030cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_OscConfig+0x940>
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_OscConfig+0x934>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_RCC_OscConfig+0x934>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	e03c      	b.n	8003184 <HAL_RCC_OscConfig+0x9ac>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	10908120 	.word	0x10908120
 8003114:	40007000 	.word	0x40007000
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_OscConfig+0x96a>
 8003128:	4bc1      	ldr	r3, [pc, #772]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4ac0      	ldr	r2, [pc, #768]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	4bbe      	ldr	r3, [pc, #760]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4abd      	ldr	r2, [pc, #756]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	e020      	b.n	8003184 <HAL_RCC_OscConfig+0x9ac>
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x994>
 8003152:	4bb7      	ldr	r3, [pc, #732]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4ab6      	ldr	r2, [pc, #728]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6213      	str	r3, [r2, #32]
 800315e:	4bb4      	ldr	r3, [pc, #720]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4ab3      	ldr	r2, [pc, #716]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0x9ac>
 800316c:	4bb0      	ldr	r3, [pc, #704]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4aaf      	ldr	r2, [pc, #700]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	4bad      	ldr	r3, [pc, #692]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4aac      	ldr	r2, [pc, #688]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8081 	beq.w	8003298 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7ff f889 	bl	80022ac <HAL_GetTick>
 800319a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7ff f884 	bl	80022ac <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e345      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031e4:	2202      	movs	r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031fe:	601a      	str	r2, [r3, #0]
  return result;
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003208:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d102      	bne.n	8003224 <HAL_RCC_OscConfig+0xa4c>
 800321e:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	e013      	b.n	800324c <HAL_RCC_OscConfig+0xa74>
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800322c:	2202      	movs	r2, #2
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	4b79      	ldr	r3, [pc, #484]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003250:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003254:	2102      	movs	r1, #2
 8003256:	6011      	str	r1, [r2, #0]
 8003258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800325c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	fa92 f1a2 	rbit	r1, r2
 8003266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800326e:	6011      	str	r1, [r2, #0]
  return result;
 8003270:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003274:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	f002 021f 	and.w	r2, r2, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d084      	beq.n	80031a0 <HAL_RCC_OscConfig+0x9c8>
 8003296:	e07f      	b.n	8003398 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7ff f808 	bl	80022ac <HAL_GetTick>
 800329c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7ff f803 	bl	80022ac <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e2c4      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032e6:	2202      	movs	r2, #2
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800330a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d102      	bne.n	8003326 <HAL_RCC_OscConfig+0xb4e>
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	e013      	b.n	800334e <HAL_RCC_OscConfig+0xb76>
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800332e:	2202      	movs	r2, #2
 8003330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003352:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003356:	2102      	movs	r1, #2
 8003358:	6011      	str	r1, [r2, #0]
 800335a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800335e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	fa92 f1a2 	rbit	r1, r2
 8003368:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800336c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003370:	6011      	str	r1, [r2, #0]
  return result;
 8003372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003376:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d184      	bne.n	80032a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003398:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8242 	beq.w	8003842 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_RCC_OscConfig+0xc58>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	f000 8213 	beq.w	80037f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f040 8162 	bne.w	80036a2 <HAL_RCC_OscConfig+0xeca>
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003402:	601a      	str	r2, [r3, #0]
  return result;
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800340c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe ff42 	bl	80022ac <HAL_GetTick>
 8003428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	e00c      	b.n	8003448 <HAL_RCC_OscConfig+0xc70>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe ff3a 	bl	80022ac <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e1fd      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800346c:	601a      	str	r2, [r3, #0]
  return result;
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003476:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d102      	bne.n	8003492 <HAL_RCC_OscConfig+0xcba>
 800348c:	4bb0      	ldr	r3, [pc, #704]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	e027      	b.n	80034e2 <HAL_RCC_OscConfig+0xd0a>
 8003492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003496:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800349a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	fa93 f2a3 	rbit	r2, r3
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	fa93 f2a3 	rbit	r2, r3
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	4b9c      	ldr	r3, [pc, #624]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034ee:	6011      	str	r1, [r2, #0]
 80034f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	fa92 f1a2 	rbit	r1, r2
 80034fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003502:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003506:	6011      	str	r1, [r2, #0]
  return result;
 8003508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f042 0220 	orr.w	r2, r2, #32
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f002 021f 	and.w	r2, r2, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d182      	bne.n	8003434 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352e:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	430b      	orrs	r3, r1
 8003550:	497f      	ldr	r1, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800355e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	fa93 f2a3 	rbit	r2, r3
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800357a:	601a      	str	r2, [r3, #0]
  return result;
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003584:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003590:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	461a      	mov	r2, r3
 8003598:	2301      	movs	r3, #1
 800359a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fe86 	bl	80022ac <HAL_GetTick>
 80035a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a4:	e009      	b.n	80035ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe fe81 	bl	80022ac <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e144      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f2a3 	rbit	r2, r3
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035de:	601a      	str	r2, [r3, #0]
  return result;
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_OscConfig+0xe2c>
 80035fe:	4b54      	ldr	r3, [pc, #336]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e027      	b.n	8003654 <HAL_RCC_OscConfig+0xe7c>
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800360c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003658:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800365c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003666:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	fa92 f1a2 	rbit	r1, r2
 8003670:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003674:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003678:	6011      	str	r1, [r2, #0]
  return result;
 800367a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d082      	beq.n	80035a6 <HAL_RCC_OscConfig+0xdce>
 80036a0:	e0cf      	b.n	8003842 <HAL_RCC_OscConfig+0x106a>
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036c6:	601a      	str	r2, [r3, #0]
  return result;
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	461a      	mov	r2, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe fde0 	bl	80022ac <HAL_GetTick>
 80036ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	e009      	b.n	8003706 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe fddb 	bl	80022ac <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e09e      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800370e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800372a:	601a      	str	r2, [r3, #0]
  return result;
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003734:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d104      	bne.n	8003754 <HAL_RCC_OscConfig+0xf7c>
 800374a:	4b01      	ldr	r3, [pc, #4]	; (8003750 <HAL_RCC_OscConfig+0xf78>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e029      	b.n	80037a4 <HAL_RCC_OscConfig+0xfcc>
 8003750:	40021000 	.word	0x40021000
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800375c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	fa93 f2a3 	rbit	r2, r3
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	fa93 f2a3 	rbit	r2, r3
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCC_OscConfig+0x1078>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	fa92 f1a2 	rbit	r1, r2
 80037c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037c8:	6011      	str	r1, [r2, #0]
  return result;
 80037ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	f002 021f 	and.w	r2, r2, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d180      	bne.n	80036f2 <HAL_RCC_OscConfig+0xf1a>
 80037f0:	e027      	b.n	8003842 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e01e      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_RCC_OscConfig+0x1078>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800380e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003812:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	429a      	cmp	r2, r3
 8003824:	d10b      	bne.n	800383e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003826:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800382a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800383a:	429a      	cmp	r2, r3
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b09e      	sub	sp, #120	; 0x78
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e162      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b90      	ldr	r3, [pc, #576]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	498b      	ldr	r1, [pc, #556]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e14a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	497f      	ldr	r1, [pc, #508]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80dc 	beq.w	8003a80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d13c      	bne.n	800394a <HAL_RCC_ClockConfig+0xf6>
 80038d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_RCC_ClockConfig+0xa6>
 80038f4:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e00f      	b.n	800391a <HAL_RCC_ClockConfig+0xc6>
 80038fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	667b      	str	r3, [r7, #100]	; 0x64
 8003908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800390c:	663b      	str	r3, [r7, #96]	; 0x60
 800390e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003916:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003922:	fa92 f2a2 	rbit	r2, r2
 8003926:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d17b      	bne.n	8003a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0f3      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d13c      	bne.n	80039cc <HAL_RCC_ClockConfig+0x178>
 8003952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003956:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_RCC_ClockConfig+0x128>
 8003976:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e00f      	b.n	800399c <HAL_RCC_ClockConfig+0x148>
 800397c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
 800398a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800398e:	643b      	str	r3, [r7, #64]	; 0x40
 8003990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003998:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80039a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a4:	fa92 f2a2 	rbit	r2, r2
 80039a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ac:	fab2 f282 	clz	r2, r2
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f042 0220 	orr.w	r2, r2, #32
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	f002 021f 	and.w	r2, r2, #31
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f202 	lsl.w	r2, r1, r2
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d13a      	bne.n	8003a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b2      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
 80039cc:	2302      	movs	r3, #2
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x1a0>
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	e00d      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1bc>
 80039f4:	2302      	movs	r3, #2
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	2302      	movs	r3, #2
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2202      	movs	r2, #2
 8003a12:	61ba      	str	r2, [r7, #24]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	617a      	str	r2, [r7, #20]
  return result;
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	f042 0220 	orr.w	r2, r2, #32
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	f002 021f 	and.w	r2, r2, #31
 8003a2e:	2101      	movs	r1, #1
 8003a30:	fa01 f202 	lsl.w	r2, r1, r2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e079      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	491a      	ldr	r1, [pc, #104]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fc2c 	bl	80022ac <HAL_GetTick>
 8003a54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe fc28 	bl	80022ac <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e061      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d214      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 0207 	bic.w	r2, r3, #7
 8003a96:	4906      	ldr	r1, [pc, #24]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_ClockConfig+0x25c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e040      	b.n	8003b32 <HAL_RCC_ClockConfig+0x2de>
 8003ab0:	40022000 	.word	0x40022000
 8003ab4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCC_ClockConfig+0x2e8>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <HAL_RCC_ClockConfig+0x2e8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_RCC_ClockConfig+0x2e8>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4912      	ldr	r1, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x2e8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003af6:	f000 f829 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003afa:	4601      	mov	r1, r0
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <HAL_RCC_ClockConfig+0x2e8>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	22f0      	movs	r2, #240	; 0xf0
 8003b06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	fa92 f2a2 	rbit	r2, r2
 8003b0e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	fab2 f282 	clz	r2, r2
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	40d3      	lsrs	r3, r2
 8003b1a:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x2ec>)
 8003b1c:	5cd3      	ldrb	r3, [r2, r3]
 8003b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_RCC_ClockConfig+0x2f0>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_RCC_ClockConfig+0x2f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fb7a 	bl	8002224 <HAL_InitTick>
  
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3778      	adds	r7, #120	; 0x78
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08004434 	.word	0x08004434
 8003b44:	20000104 	.word	0x20000104
 8003b48:	20000108 	.word	0x20000108

08003b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b08b      	sub	sp, #44	; 0x2c
 8003b50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x30>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x36>
 8003b7a:	e03c      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b7e:	623b      	str	r3, [r7, #32]
      break;
 8003b80:	e03c      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	fa92 f2a2 	rbit	r2, r2
 8003b94:	607a      	str	r2, [r7, #4]
  return result;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	fab2 f282 	clz	r2, r2
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	40d3      	lsrs	r3, r2
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ba2:	5cd3      	ldrb	r3, [r2, r3]
 8003ba4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ba6:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	220f      	movs	r2, #15
 8003bb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	fa92 f2a2 	rbit	r2, r2
 8003bb8:	60fa      	str	r2, [r7, #12]
  return result;
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	40d3      	lsrs	r3, r2
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	e004      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	623b      	str	r3, [r7, #32]
      break;
 8003bf4:	e002      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bf8:	623b      	str	r3, [r7, #32]
      break;
 8003bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	372c      	adds	r7, #44	; 0x2c
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	007a1200 	.word	0x007a1200
 8003c14:	08004444 	.word	0x08004444
 8003c18:	08004454 	.word	0x08004454
 8003c1c:	003d0900 	.word	0x003d0900

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b092      	sub	sp, #72	; 0x48
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80cd 	beq.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c44:	4b8e      	ldr	r3, [pc, #568]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10e      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	4a8a      	ldr	r2, [pc, #552]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	61d3      	str	r3, [r2, #28]
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a81      	ldr	r2, [pc, #516]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fe fb11 	bl	80022ac <HAL_GetTick>
 8003c8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fe fb0d 	bl	80022ac <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b64      	cmp	r3, #100	; 0x64
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e0ea      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cac:	4b74      	ldr	r3, [pc, #464]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d07d      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d076      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	461a      	mov	r2, r3
 8003d18:	2300      	movs	r3, #0
 8003d1a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d1c:	4a58      	ldr	r2, [pc, #352]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d20:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d045      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fabe 	bl	80022ac <HAL_GetTick>
 8003d30:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fe faba 	bl	80022ac <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e095      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	2302      	movs	r3, #2
 8003d58:	623b      	str	r3, [r7, #32]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	61fb      	str	r3, [r7, #28]
  return result;
 8003d62:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d102      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d78:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	e007      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2202      	movs	r2, #2
 8003d90:	613a      	str	r2, [r7, #16]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	fa92 f2a2 	rbit	r2, r2
 8003d98:	60fa      	str	r2, [r7, #12]
  return result;
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	fab2 f282 	clz	r2, r2
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	f002 021f 	and.w	r2, r2, #31
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0bd      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003db8:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	492e      	ldr	r1, [pc, #184]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dea:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4922      	ldr	r1, [pc, #136]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f023 0210 	bic.w	r2, r3, #16
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	491a      	ldr	r1, [pc, #104]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	4913      	ldr	r1, [pc, #76]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	490b      	ldr	r1, [pc, #44]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	4904      	ldr	r1, [pc, #16]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3748      	adds	r7, #72	; 0x48
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
 8003e88:	10908100 	.word	0x10908100

08003e8c <LL_ADC_REG_SetSequencerLength>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_ADC_IsEnabled>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003ee6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003eea:	f7ff ffe2 	bl	8003eb2 <LL_ADC_IsEnabled>
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4817      	ldr	r0, [pc, #92]	; (8003f50 <LL_ADC_CommonInit+0x78>)
 8003ef2:	f7ff ffde 	bl	8003eb2 <LL_ADC_IsEnabled>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4323      	orrs	r3, r4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d120      	bne.n	8003f40 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <LL_ADC_CommonInit+0x7c>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	6811      	ldr	r1, [r2, #0]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	6852      	ldr	r2, [r2, #4]
 8003f16:	4311      	orrs	r1, r2
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	68d2      	ldr	r2, [r2, #12]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	e00b      	b.n	8003f44 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <LL_ADC_CommonInit+0x7c>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	e001      	b.n	8003f44 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	50000100 	.word	0x50000100
 8003f54:	fffc30e0 	.word	0xfffc30e0

08003f58 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ffa3 	bl	8003eb2 <LL_ADC_IsEnabled>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d111      	bne.n	8003f96 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f7a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	6852      	ldr	r2, [r2, #4]
 8003f86:	4311      	orrs	r1, r2
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	6892      	ldr	r2, [r2, #8]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e001      	b.n	8003f9a <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ff7d 	bl	8003eb2 <LL_ADC_IsEnabled>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d132      	bne.n	8004024 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d015      	beq.n	8003ff2 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <LL_ADC_REG_Init+0x90>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	6811      	ldr	r1, [r2, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	6892      	ldr	r2, [r2, #8]
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	68d2      	ldr	r2, [r2, #12]
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	6912      	ldr	r2, [r2, #16]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	6952      	ldr	r2, [r2, #20]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]
 8003ff0:	e011      	b.n	8004016 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <LL_ADC_REG_Init+0x90>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	6811      	ldr	r1, [r2, #0]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	68d2      	ldr	r2, [r2, #12]
 8004002:	4311      	orrs	r1, r2
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	6912      	ldr	r2, [r2, #16]
 8004008:	4311      	orrs	r1, r2
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	6952      	ldr	r2, [r2, #20]
 800400e:	430a      	orrs	r2, r1
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff35 	bl	8003e8c <LL_ADC_REG_SetSequencerLength>
 8004022:	e001      	b.n	8004028 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	fff0c03c 	.word	0xfff0c03c

08004038 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	613b      	str	r3, [r7, #16]
  return result;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2103      	movs	r1, #3
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	61bb      	str	r3, [r7, #24]
  return result;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b089      	sub	sp, #36	; 0x24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	613b      	str	r3, [r7, #16]
  return result;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	2103      	movs	r1, #3
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	401a      	ands	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	61bb      	str	r3, [r7, #24]
  return result;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	431a      	orrs	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004118:	bf00      	nop
 800411a:	3724      	adds	r7, #36	; 0x24
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004124:	b480      	push	{r7}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	613b      	str	r3, [r7, #16]
  return result;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2103      	movs	r1, #3
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	401a      	ands	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	61bb      	str	r3, [r7, #24]
  return result;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	60da      	str	r2, [r3, #12]
}
 8004176:	bf00      	nop
 8004178:	3724      	adds	r7, #36	; 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004182:	b480      	push	{r7}
 8004184:	b089      	sub	sp, #36	; 0x24
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	613b      	str	r3, [r7, #16]
  return result;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	210f      	movs	r1, #15
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	401a      	ands	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	61bb      	str	r3, [r7, #24]
  return result;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80041d4:	bf00      	nop
 80041d6:	3724      	adds	r7, #36	; 0x24
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	613b      	str	r3, [r7, #16]
  return result;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	210f      	movs	r1, #15
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	401a      	ands	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	61bb      	str	r3, [r7, #24]
  return result;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004236:	bf00      	nop
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	613b      	str	r3, [r7, #16]
  return result;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004264:	e051      	b.n	800430a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	2101      	movs	r1, #1
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d043      	beq.n	8004304 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d003      	beq.n	800428c <LL_GPIO_Init+0x4a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d10e      	bne.n	80042aa <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	461a      	mov	r2, r3
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff16 	bl	80040c6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fef6 	bl	8004096 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	461a      	mov	r2, r3
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff36 	bl	8004124 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d11a      	bne.n	80042f6 <LL_GPIO_Init+0xb4>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	60bb      	str	r3, [r7, #8]
  return result;
 80042cc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b07      	cmp	r3, #7
 80042d6:	d807      	bhi.n	80042e8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	461a      	mov	r2, r3
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ff4e 	bl	8004182 <LL_GPIO_SetAFPin_0_7>
 80042e6:	e006      	b.n	80042f6 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	461a      	mov	r2, r3
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff75 	bl	80041e0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	461a      	mov	r2, r3
 80042fc:	69b9      	ldr	r1, [r7, #24]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fe9a 	bl	8004038 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1a6      	bne.n	8004266 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4d0d      	ldr	r5, [pc, #52]	; (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2600      	movs	r6, #0
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4d0b      	ldr	r5, [pc, #44]	; (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <__libc_init_array+0x44>)
 8004338:	f000 f820 	bl	800437c <_init>
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2600      	movs	r6, #0
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	08004464 	.word	0x08004464
 8004360:	08004464 	.word	0x08004464
 8004364:	08004464 	.word	0x08004464
 8004368:	08004468 	.word	0x08004468

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
